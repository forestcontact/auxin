// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `storage.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SessionStructure {
    // message fields
    pub session_version: u32,
    pub local_identity_public: ::std::vec::Vec<u8>,
    pub remote_identity_public: ::std::vec::Vec<u8>,
    pub root_key: ::std::vec::Vec<u8>,
    pub previous_counter: u32,
    pub sender_chain: ::protobuf::SingularPtrField<SessionStructure_Chain>,
    pub receiver_chains: ::protobuf::RepeatedField<SessionStructure_Chain>,
    pub pending_key_exchange: ::protobuf::SingularPtrField<SessionStructure_PendingKeyExchange>,
    pub pending_pre_key: ::protobuf::SingularPtrField<SessionStructure_PendingPreKey>,
    pub remote_registration_id: u32,
    pub local_registration_id: u32,
    pub needs_refresh: bool,
    pub alice_base_key: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionStructure {
    fn default() -> &'a SessionStructure {
        <SessionStructure as ::protobuf::Message>::default_instance()
    }
}

impl SessionStructure {
    pub fn new() -> SessionStructure {
        ::std::default::Default::default()
    }

    // uint32 session_version = 1;


    pub fn get_session_version(&self) -> u32 {
        self.session_version
    }
    pub fn clear_session_version(&mut self) {
        self.session_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_session_version(&mut self, v: u32) {
        self.session_version = v;
    }

    // bytes local_identity_public = 2;


    pub fn get_local_identity_public(&self) -> &[u8] {
        &self.local_identity_public
    }
    pub fn clear_local_identity_public(&mut self) {
        self.local_identity_public.clear();
    }

    // Param is passed by value, moved
    pub fn set_local_identity_public(&mut self, v: ::std::vec::Vec<u8>) {
        self.local_identity_public = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_identity_public(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.local_identity_public
    }

    // Take field
    pub fn take_local_identity_public(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.local_identity_public, ::std::vec::Vec::new())
    }

    // bytes remote_identity_public = 3;


    pub fn get_remote_identity_public(&self) -> &[u8] {
        &self.remote_identity_public
    }
    pub fn clear_remote_identity_public(&mut self) {
        self.remote_identity_public.clear();
    }

    // Param is passed by value, moved
    pub fn set_remote_identity_public(&mut self, v: ::std::vec::Vec<u8>) {
        self.remote_identity_public = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_remote_identity_public(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.remote_identity_public
    }

    // Take field
    pub fn take_remote_identity_public(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.remote_identity_public, ::std::vec::Vec::new())
    }

    // bytes root_key = 4;


    pub fn get_root_key(&self) -> &[u8] {
        &self.root_key
    }
    pub fn clear_root_key(&mut self) {
        self.root_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_root_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.root_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.root_key
    }

    // Take field
    pub fn take_root_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.root_key, ::std::vec::Vec::new())
    }

    // uint32 previous_counter = 5;


    pub fn get_previous_counter(&self) -> u32 {
        self.previous_counter
    }
    pub fn clear_previous_counter(&mut self) {
        self.previous_counter = 0;
    }

    // Param is passed by value, moved
    pub fn set_previous_counter(&mut self, v: u32) {
        self.previous_counter = v;
    }

    // .signal.proto.storage.SessionStructure.Chain sender_chain = 6;


    pub fn get_sender_chain(&self) -> &SessionStructure_Chain {
        self.sender_chain.as_ref().unwrap_or_else(|| <SessionStructure_Chain as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sender_chain(&mut self) {
        self.sender_chain.clear();
    }

    pub fn has_sender_chain(&self) -> bool {
        self.sender_chain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender_chain(&mut self, v: SessionStructure_Chain) {
        self.sender_chain = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_chain(&mut self) -> &mut SessionStructure_Chain {
        if self.sender_chain.is_none() {
            self.sender_chain.set_default();
        }
        self.sender_chain.as_mut().unwrap()
    }

    // Take field
    pub fn take_sender_chain(&mut self) -> SessionStructure_Chain {
        self.sender_chain.take().unwrap_or_else(|| SessionStructure_Chain::new())
    }

    // repeated .signal.proto.storage.SessionStructure.Chain receiver_chains = 7;


    pub fn get_receiver_chains(&self) -> &[SessionStructure_Chain] {
        &self.receiver_chains
    }
    pub fn clear_receiver_chains(&mut self) {
        self.receiver_chains.clear();
    }

    // Param is passed by value, moved
    pub fn set_receiver_chains(&mut self, v: ::protobuf::RepeatedField<SessionStructure_Chain>) {
        self.receiver_chains = v;
    }

    // Mutable pointer to the field.
    pub fn mut_receiver_chains(&mut self) -> &mut ::protobuf::RepeatedField<SessionStructure_Chain> {
        &mut self.receiver_chains
    }

    // Take field
    pub fn take_receiver_chains(&mut self) -> ::protobuf::RepeatedField<SessionStructure_Chain> {
        ::std::mem::replace(&mut self.receiver_chains, ::protobuf::RepeatedField::new())
    }

    // .signal.proto.storage.SessionStructure.PendingKeyExchange pending_key_exchange = 8;


    pub fn get_pending_key_exchange(&self) -> &SessionStructure_PendingKeyExchange {
        self.pending_key_exchange.as_ref().unwrap_or_else(|| <SessionStructure_PendingKeyExchange as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pending_key_exchange(&mut self) {
        self.pending_key_exchange.clear();
    }

    pub fn has_pending_key_exchange(&self) -> bool {
        self.pending_key_exchange.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pending_key_exchange(&mut self, v: SessionStructure_PendingKeyExchange) {
        self.pending_key_exchange = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pending_key_exchange(&mut self) -> &mut SessionStructure_PendingKeyExchange {
        if self.pending_key_exchange.is_none() {
            self.pending_key_exchange.set_default();
        }
        self.pending_key_exchange.as_mut().unwrap()
    }

    // Take field
    pub fn take_pending_key_exchange(&mut self) -> SessionStructure_PendingKeyExchange {
        self.pending_key_exchange.take().unwrap_or_else(|| SessionStructure_PendingKeyExchange::new())
    }

    // .signal.proto.storage.SessionStructure.PendingPreKey pending_pre_key = 9;


    pub fn get_pending_pre_key(&self) -> &SessionStructure_PendingPreKey {
        self.pending_pre_key.as_ref().unwrap_or_else(|| <SessionStructure_PendingPreKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pending_pre_key(&mut self) {
        self.pending_pre_key.clear();
    }

    pub fn has_pending_pre_key(&self) -> bool {
        self.pending_pre_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pending_pre_key(&mut self, v: SessionStructure_PendingPreKey) {
        self.pending_pre_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pending_pre_key(&mut self) -> &mut SessionStructure_PendingPreKey {
        if self.pending_pre_key.is_none() {
            self.pending_pre_key.set_default();
        }
        self.pending_pre_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_pending_pre_key(&mut self) -> SessionStructure_PendingPreKey {
        self.pending_pre_key.take().unwrap_or_else(|| SessionStructure_PendingPreKey::new())
    }

    // uint32 remote_registration_id = 10;


    pub fn get_remote_registration_id(&self) -> u32 {
        self.remote_registration_id
    }
    pub fn clear_remote_registration_id(&mut self) {
        self.remote_registration_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_remote_registration_id(&mut self, v: u32) {
        self.remote_registration_id = v;
    }

    // uint32 local_registration_id = 11;


    pub fn get_local_registration_id(&self) -> u32 {
        self.local_registration_id
    }
    pub fn clear_local_registration_id(&mut self) {
        self.local_registration_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_local_registration_id(&mut self, v: u32) {
        self.local_registration_id = v;
    }

    // bool needs_refresh = 12;


    pub fn get_needs_refresh(&self) -> bool {
        self.needs_refresh
    }
    pub fn clear_needs_refresh(&mut self) {
        self.needs_refresh = false;
    }

    // Param is passed by value, moved
    pub fn set_needs_refresh(&mut self, v: bool) {
        self.needs_refresh = v;
    }

    // bytes alice_base_key = 13;


    pub fn get_alice_base_key(&self) -> &[u8] {
        &self.alice_base_key
    }
    pub fn clear_alice_base_key(&mut self) {
        self.alice_base_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_alice_base_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.alice_base_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alice_base_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.alice_base_key
    }

    // Take field
    pub fn take_alice_base_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.alice_base_key, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SessionStructure {
    fn is_initialized(&self) -> bool {
        for v in &self.sender_chain {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.receiver_chains {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pending_key_exchange {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pending_pre_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.session_version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.local_identity_public)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.remote_identity_public)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.root_key)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.previous_counter = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sender_chain)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.receiver_chains)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pending_key_exchange)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pending_pre_key)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.remote_registration_id = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.local_registration_id = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.needs_refresh = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.alice_base_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.session_version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.session_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.local_identity_public.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.local_identity_public);
        }
        if !self.remote_identity_public.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.remote_identity_public);
        }
        if !self.root_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.root_key);
        }
        if self.previous_counter != 0 {
            my_size += ::protobuf::rt::value_size(5, self.previous_counter, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.sender_chain.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.receiver_chains {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.pending_key_exchange.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pending_pre_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.remote_registration_id != 0 {
            my_size += ::protobuf::rt::value_size(10, self.remote_registration_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.local_registration_id != 0 {
            my_size += ::protobuf::rt::value_size(11, self.local_registration_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.needs_refresh != false {
            my_size += 2;
        }
        if !self.alice_base_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(13, &self.alice_base_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.session_version != 0 {
            os.write_uint32(1, self.session_version)?;
        }
        if !self.local_identity_public.is_empty() {
            os.write_bytes(2, &self.local_identity_public)?;
        }
        if !self.remote_identity_public.is_empty() {
            os.write_bytes(3, &self.remote_identity_public)?;
        }
        if !self.root_key.is_empty() {
            os.write_bytes(4, &self.root_key)?;
        }
        if self.previous_counter != 0 {
            os.write_uint32(5, self.previous_counter)?;
        }
        if let Some(ref v) = self.sender_chain.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.receiver_chains {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.pending_key_exchange.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pending_pre_key.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.remote_registration_id != 0 {
            os.write_uint32(10, self.remote_registration_id)?;
        }
        if self.local_registration_id != 0 {
            os.write_uint32(11, self.local_registration_id)?;
        }
        if self.needs_refresh != false {
            os.write_bool(12, self.needs_refresh)?;
        }
        if !self.alice_base_key.is_empty() {
            os.write_bytes(13, &self.alice_base_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionStructure {
        SessionStructure::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "session_version",
                |m: &SessionStructure| { &m.session_version },
                |m: &mut SessionStructure| { &mut m.session_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "local_identity_public",
                |m: &SessionStructure| { &m.local_identity_public },
                |m: &mut SessionStructure| { &mut m.local_identity_public },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "remote_identity_public",
                |m: &SessionStructure| { &m.remote_identity_public },
                |m: &mut SessionStructure| { &mut m.remote_identity_public },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "root_key",
                |m: &SessionStructure| { &m.root_key },
                |m: &mut SessionStructure| { &mut m.root_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "previous_counter",
                |m: &SessionStructure| { &m.previous_counter },
                |m: &mut SessionStructure| { &mut m.previous_counter },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SessionStructure_Chain>>(
                "sender_chain",
                |m: &SessionStructure| { &m.sender_chain },
                |m: &mut SessionStructure| { &mut m.sender_chain },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SessionStructure_Chain>>(
                "receiver_chains",
                |m: &SessionStructure| { &m.receiver_chains },
                |m: &mut SessionStructure| { &mut m.receiver_chains },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SessionStructure_PendingKeyExchange>>(
                "pending_key_exchange",
                |m: &SessionStructure| { &m.pending_key_exchange },
                |m: &mut SessionStructure| { &mut m.pending_key_exchange },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SessionStructure_PendingPreKey>>(
                "pending_pre_key",
                |m: &SessionStructure| { &m.pending_pre_key },
                |m: &mut SessionStructure| { &mut m.pending_pre_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "remote_registration_id",
                |m: &SessionStructure| { &m.remote_registration_id },
                |m: &mut SessionStructure| { &mut m.remote_registration_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "local_registration_id",
                |m: &SessionStructure| { &m.local_registration_id },
                |m: &mut SessionStructure| { &mut m.local_registration_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "needs_refresh",
                |m: &SessionStructure| { &m.needs_refresh },
                |m: &mut SessionStructure| { &mut m.needs_refresh },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "alice_base_key",
                |m: &SessionStructure| { &m.alice_base_key },
                |m: &mut SessionStructure| { &mut m.alice_base_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SessionStructure>(
                "SessionStructure",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SessionStructure {
        static instance: ::protobuf::rt::LazyV2<SessionStructure> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SessionStructure::new)
    }
}

impl ::protobuf::Clear for SessionStructure {
    fn clear(&mut self) {
        self.session_version = 0;
        self.local_identity_public.clear();
        self.remote_identity_public.clear();
        self.root_key.clear();
        self.previous_counter = 0;
        self.sender_chain.clear();
        self.receiver_chains.clear();
        self.pending_key_exchange.clear();
        self.pending_pre_key.clear();
        self.remote_registration_id = 0;
        self.local_registration_id = 0;
        self.needs_refresh = false;
        self.alice_base_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionStructure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionStructure {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SessionStructure_Chain {
    // message fields
    pub sender_ratchet_key: ::std::vec::Vec<u8>,
    pub sender_ratchet_key_private: ::std::vec::Vec<u8>,
    pub chain_key: ::protobuf::SingularPtrField<SessionStructure_Chain_ChainKey>,
    pub message_keys: ::protobuf::RepeatedField<SessionStructure_Chain_MessageKey>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionStructure_Chain {
    fn default() -> &'a SessionStructure_Chain {
        <SessionStructure_Chain as ::protobuf::Message>::default_instance()
    }
}

impl SessionStructure_Chain {
    pub fn new() -> SessionStructure_Chain {
        ::std::default::Default::default()
    }

    // bytes sender_ratchet_key = 1;


    pub fn get_sender_ratchet_key(&self) -> &[u8] {
        &self.sender_ratchet_key
    }
    pub fn clear_sender_ratchet_key(&mut self) {
        self.sender_ratchet_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender_ratchet_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.sender_ratchet_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_ratchet_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sender_ratchet_key
    }

    // Take field
    pub fn take_sender_ratchet_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sender_ratchet_key, ::std::vec::Vec::new())
    }

    // bytes sender_ratchet_key_private = 2;


    pub fn get_sender_ratchet_key_private(&self) -> &[u8] {
        &self.sender_ratchet_key_private
    }
    pub fn clear_sender_ratchet_key_private(&mut self) {
        self.sender_ratchet_key_private.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender_ratchet_key_private(&mut self, v: ::std::vec::Vec<u8>) {
        self.sender_ratchet_key_private = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_ratchet_key_private(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sender_ratchet_key_private
    }

    // Take field
    pub fn take_sender_ratchet_key_private(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sender_ratchet_key_private, ::std::vec::Vec::new())
    }

    // .signal.proto.storage.SessionStructure.Chain.ChainKey chain_key = 3;


    pub fn get_chain_key(&self) -> &SessionStructure_Chain_ChainKey {
        self.chain_key.as_ref().unwrap_or_else(|| <SessionStructure_Chain_ChainKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_chain_key(&mut self) {
        self.chain_key.clear();
    }

    pub fn has_chain_key(&self) -> bool {
        self.chain_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chain_key(&mut self, v: SessionStructure_Chain_ChainKey) {
        self.chain_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_key(&mut self) -> &mut SessionStructure_Chain_ChainKey {
        if self.chain_key.is_none() {
            self.chain_key.set_default();
        }
        self.chain_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_chain_key(&mut self) -> SessionStructure_Chain_ChainKey {
        self.chain_key.take().unwrap_or_else(|| SessionStructure_Chain_ChainKey::new())
    }

    // repeated .signal.proto.storage.SessionStructure.Chain.MessageKey message_keys = 4;


    pub fn get_message_keys(&self) -> &[SessionStructure_Chain_MessageKey] {
        &self.message_keys
    }
    pub fn clear_message_keys(&mut self) {
        self.message_keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_message_keys(&mut self, v: ::protobuf::RepeatedField<SessionStructure_Chain_MessageKey>) {
        self.message_keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_message_keys(&mut self) -> &mut ::protobuf::RepeatedField<SessionStructure_Chain_MessageKey> {
        &mut self.message_keys
    }

    // Take field
    pub fn take_message_keys(&mut self) -> ::protobuf::RepeatedField<SessionStructure_Chain_MessageKey> {
        ::std::mem::replace(&mut self.message_keys, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SessionStructure_Chain {
    fn is_initialized(&self) -> bool {
        for v in &self.chain_key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.message_keys {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sender_ratchet_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sender_ratchet_key_private)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.chain_key)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.message_keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender_ratchet_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.sender_ratchet_key);
        }
        if !self.sender_ratchet_key_private.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.sender_ratchet_key_private);
        }
        if let Some(ref v) = self.chain_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.message_keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender_ratchet_key.is_empty() {
            os.write_bytes(1, &self.sender_ratchet_key)?;
        }
        if !self.sender_ratchet_key_private.is_empty() {
            os.write_bytes(2, &self.sender_ratchet_key_private)?;
        }
        if let Some(ref v) = self.chain_key.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.message_keys {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionStructure_Chain {
        SessionStructure_Chain::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "sender_ratchet_key",
                |m: &SessionStructure_Chain| { &m.sender_ratchet_key },
                |m: &mut SessionStructure_Chain| { &mut m.sender_ratchet_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "sender_ratchet_key_private",
                |m: &SessionStructure_Chain| { &m.sender_ratchet_key_private },
                |m: &mut SessionStructure_Chain| { &mut m.sender_ratchet_key_private },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SessionStructure_Chain_ChainKey>>(
                "chain_key",
                |m: &SessionStructure_Chain| { &m.chain_key },
                |m: &mut SessionStructure_Chain| { &mut m.chain_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SessionStructure_Chain_MessageKey>>(
                "message_keys",
                |m: &SessionStructure_Chain| { &m.message_keys },
                |m: &mut SessionStructure_Chain| { &mut m.message_keys },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SessionStructure_Chain>(
                "SessionStructure.Chain",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SessionStructure_Chain {
        static instance: ::protobuf::rt::LazyV2<SessionStructure_Chain> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SessionStructure_Chain::new)
    }
}

impl ::protobuf::Clear for SessionStructure_Chain {
    fn clear(&mut self) {
        self.sender_ratchet_key.clear();
        self.sender_ratchet_key_private.clear();
        self.chain_key.clear();
        self.message_keys.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionStructure_Chain {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionStructure_Chain {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SessionStructure_Chain_ChainKey {
    // message fields
    pub index: u32,
    pub key: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionStructure_Chain_ChainKey {
    fn default() -> &'a SessionStructure_Chain_ChainKey {
        <SessionStructure_Chain_ChainKey as ::protobuf::Message>::default_instance()
    }
}

impl SessionStructure_Chain_ChainKey {
    pub fn new() -> SessionStructure_Chain_ChainKey {
        ::std::default::Default::default()
    }

    // uint32 index = 1;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // bytes key = 2;


    pub fn get_key(&self) -> &[u8] {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SessionStructure_Chain_ChainKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        if !self.key.is_empty() {
            os.write_bytes(2, &self.key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionStructure_Chain_ChainKey {
        SessionStructure_Chain_ChainKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "index",
                |m: &SessionStructure_Chain_ChainKey| { &m.index },
                |m: &mut SessionStructure_Chain_ChainKey| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "key",
                |m: &SessionStructure_Chain_ChainKey| { &m.key },
                |m: &mut SessionStructure_Chain_ChainKey| { &mut m.key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SessionStructure_Chain_ChainKey>(
                "SessionStructure.Chain.ChainKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SessionStructure_Chain_ChainKey {
        static instance: ::protobuf::rt::LazyV2<SessionStructure_Chain_ChainKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SessionStructure_Chain_ChainKey::new)
    }
}

impl ::protobuf::Clear for SessionStructure_Chain_ChainKey {
    fn clear(&mut self) {
        self.index = 0;
        self.key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionStructure_Chain_ChainKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionStructure_Chain_ChainKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SessionStructure_Chain_MessageKey {
    // message fields
    pub index: u32,
    pub cipher_key: ::std::vec::Vec<u8>,
    pub mac_key: ::std::vec::Vec<u8>,
    pub iv: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionStructure_Chain_MessageKey {
    fn default() -> &'a SessionStructure_Chain_MessageKey {
        <SessionStructure_Chain_MessageKey as ::protobuf::Message>::default_instance()
    }
}

impl SessionStructure_Chain_MessageKey {
    pub fn new() -> SessionStructure_Chain_MessageKey {
        ::std::default::Default::default()
    }

    // uint32 index = 1;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // bytes cipher_key = 2;


    pub fn get_cipher_key(&self) -> &[u8] {
        &self.cipher_key
    }
    pub fn clear_cipher_key(&mut self) {
        self.cipher_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_cipher_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.cipher_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cipher_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.cipher_key
    }

    // Take field
    pub fn take_cipher_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.cipher_key, ::std::vec::Vec::new())
    }

    // bytes mac_key = 3;


    pub fn get_mac_key(&self) -> &[u8] {
        &self.mac_key
    }
    pub fn clear_mac_key(&mut self) {
        self.mac_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_mac_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.mac_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mac_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.mac_key
    }

    // Take field
    pub fn take_mac_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.mac_key, ::std::vec::Vec::new())
    }

    // bytes iv = 4;


    pub fn get_iv(&self) -> &[u8] {
        &self.iv
    }
    pub fn clear_iv(&mut self) {
        self.iv.clear();
    }

    // Param is passed by value, moved
    pub fn set_iv(&mut self, v: ::std::vec::Vec<u8>) {
        self.iv = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_iv(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.iv
    }

    // Take field
    pub fn take_iv(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.iv, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SessionStructure_Chain_MessageKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.cipher_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.mac_key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.iv)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cipher_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.cipher_key);
        }
        if !self.mac_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.mac_key);
        }
        if !self.iv.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.iv);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        if !self.cipher_key.is_empty() {
            os.write_bytes(2, &self.cipher_key)?;
        }
        if !self.mac_key.is_empty() {
            os.write_bytes(3, &self.mac_key)?;
        }
        if !self.iv.is_empty() {
            os.write_bytes(4, &self.iv)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionStructure_Chain_MessageKey {
        SessionStructure_Chain_MessageKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "index",
                |m: &SessionStructure_Chain_MessageKey| { &m.index },
                |m: &mut SessionStructure_Chain_MessageKey| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "cipher_key",
                |m: &SessionStructure_Chain_MessageKey| { &m.cipher_key },
                |m: &mut SessionStructure_Chain_MessageKey| { &mut m.cipher_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "mac_key",
                |m: &SessionStructure_Chain_MessageKey| { &m.mac_key },
                |m: &mut SessionStructure_Chain_MessageKey| { &mut m.mac_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "iv",
                |m: &SessionStructure_Chain_MessageKey| { &m.iv },
                |m: &mut SessionStructure_Chain_MessageKey| { &mut m.iv },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SessionStructure_Chain_MessageKey>(
                "SessionStructure.Chain.MessageKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SessionStructure_Chain_MessageKey {
        static instance: ::protobuf::rt::LazyV2<SessionStructure_Chain_MessageKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SessionStructure_Chain_MessageKey::new)
    }
}

impl ::protobuf::Clear for SessionStructure_Chain_MessageKey {
    fn clear(&mut self) {
        self.index = 0;
        self.cipher_key.clear();
        self.mac_key.clear();
        self.iv.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionStructure_Chain_MessageKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionStructure_Chain_MessageKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SessionStructure_PendingKeyExchange {
    // message fields
    pub sequence: u32,
    pub local_base_key: ::std::vec::Vec<u8>,
    pub local_base_key_private: ::std::vec::Vec<u8>,
    pub local_ratchet_key: ::std::vec::Vec<u8>,
    pub local_ratchet_key_private: ::std::vec::Vec<u8>,
    pub local_identity_key: ::std::vec::Vec<u8>,
    pub local_identity_key_private: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionStructure_PendingKeyExchange {
    fn default() -> &'a SessionStructure_PendingKeyExchange {
        <SessionStructure_PendingKeyExchange as ::protobuf::Message>::default_instance()
    }
}

impl SessionStructure_PendingKeyExchange {
    pub fn new() -> SessionStructure_PendingKeyExchange {
        ::std::default::Default::default()
    }

    // uint32 sequence = 1;


    pub fn get_sequence(&self) -> u32 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u32) {
        self.sequence = v;
    }

    // bytes local_base_key = 2;


    pub fn get_local_base_key(&self) -> &[u8] {
        &self.local_base_key
    }
    pub fn clear_local_base_key(&mut self) {
        self.local_base_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_local_base_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.local_base_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_base_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.local_base_key
    }

    // Take field
    pub fn take_local_base_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.local_base_key, ::std::vec::Vec::new())
    }

    // bytes local_base_key_private = 3;


    pub fn get_local_base_key_private(&self) -> &[u8] {
        &self.local_base_key_private
    }
    pub fn clear_local_base_key_private(&mut self) {
        self.local_base_key_private.clear();
    }

    // Param is passed by value, moved
    pub fn set_local_base_key_private(&mut self, v: ::std::vec::Vec<u8>) {
        self.local_base_key_private = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_base_key_private(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.local_base_key_private
    }

    // Take field
    pub fn take_local_base_key_private(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.local_base_key_private, ::std::vec::Vec::new())
    }

    // bytes local_ratchet_key = 4;


    pub fn get_local_ratchet_key(&self) -> &[u8] {
        &self.local_ratchet_key
    }
    pub fn clear_local_ratchet_key(&mut self) {
        self.local_ratchet_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_local_ratchet_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.local_ratchet_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_ratchet_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.local_ratchet_key
    }

    // Take field
    pub fn take_local_ratchet_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.local_ratchet_key, ::std::vec::Vec::new())
    }

    // bytes local_ratchet_key_private = 5;


    pub fn get_local_ratchet_key_private(&self) -> &[u8] {
        &self.local_ratchet_key_private
    }
    pub fn clear_local_ratchet_key_private(&mut self) {
        self.local_ratchet_key_private.clear();
    }

    // Param is passed by value, moved
    pub fn set_local_ratchet_key_private(&mut self, v: ::std::vec::Vec<u8>) {
        self.local_ratchet_key_private = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_ratchet_key_private(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.local_ratchet_key_private
    }

    // Take field
    pub fn take_local_ratchet_key_private(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.local_ratchet_key_private, ::std::vec::Vec::new())
    }

    // bytes local_identity_key = 7;


    pub fn get_local_identity_key(&self) -> &[u8] {
        &self.local_identity_key
    }
    pub fn clear_local_identity_key(&mut self) {
        self.local_identity_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_local_identity_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.local_identity_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_identity_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.local_identity_key
    }

    // Take field
    pub fn take_local_identity_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.local_identity_key, ::std::vec::Vec::new())
    }

    // bytes local_identity_key_private = 8;


    pub fn get_local_identity_key_private(&self) -> &[u8] {
        &self.local_identity_key_private
    }
    pub fn clear_local_identity_key_private(&mut self) {
        self.local_identity_key_private.clear();
    }

    // Param is passed by value, moved
    pub fn set_local_identity_key_private(&mut self, v: ::std::vec::Vec<u8>) {
        self.local_identity_key_private = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_identity_key_private(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.local_identity_key_private
    }

    // Take field
    pub fn take_local_identity_key_private(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.local_identity_key_private, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SessionStructure_PendingKeyExchange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sequence = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.local_base_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.local_base_key_private)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.local_ratchet_key)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.local_ratchet_key_private)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.local_identity_key)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.local_identity_key_private)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.local_base_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.local_base_key);
        }
        if !self.local_base_key_private.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.local_base_key_private);
        }
        if !self.local_ratchet_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.local_ratchet_key);
        }
        if !self.local_ratchet_key_private.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.local_ratchet_key_private);
        }
        if !self.local_identity_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.local_identity_key);
        }
        if !self.local_identity_key_private.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.local_identity_key_private);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sequence != 0 {
            os.write_uint32(1, self.sequence)?;
        }
        if !self.local_base_key.is_empty() {
            os.write_bytes(2, &self.local_base_key)?;
        }
        if !self.local_base_key_private.is_empty() {
            os.write_bytes(3, &self.local_base_key_private)?;
        }
        if !self.local_ratchet_key.is_empty() {
            os.write_bytes(4, &self.local_ratchet_key)?;
        }
        if !self.local_ratchet_key_private.is_empty() {
            os.write_bytes(5, &self.local_ratchet_key_private)?;
        }
        if !self.local_identity_key.is_empty() {
            os.write_bytes(7, &self.local_identity_key)?;
        }
        if !self.local_identity_key_private.is_empty() {
            os.write_bytes(8, &self.local_identity_key_private)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionStructure_PendingKeyExchange {
        SessionStructure_PendingKeyExchange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "sequence",
                |m: &SessionStructure_PendingKeyExchange| { &m.sequence },
                |m: &mut SessionStructure_PendingKeyExchange| { &mut m.sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "local_base_key",
                |m: &SessionStructure_PendingKeyExchange| { &m.local_base_key },
                |m: &mut SessionStructure_PendingKeyExchange| { &mut m.local_base_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "local_base_key_private",
                |m: &SessionStructure_PendingKeyExchange| { &m.local_base_key_private },
                |m: &mut SessionStructure_PendingKeyExchange| { &mut m.local_base_key_private },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "local_ratchet_key",
                |m: &SessionStructure_PendingKeyExchange| { &m.local_ratchet_key },
                |m: &mut SessionStructure_PendingKeyExchange| { &mut m.local_ratchet_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "local_ratchet_key_private",
                |m: &SessionStructure_PendingKeyExchange| { &m.local_ratchet_key_private },
                |m: &mut SessionStructure_PendingKeyExchange| { &mut m.local_ratchet_key_private },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "local_identity_key",
                |m: &SessionStructure_PendingKeyExchange| { &m.local_identity_key },
                |m: &mut SessionStructure_PendingKeyExchange| { &mut m.local_identity_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "local_identity_key_private",
                |m: &SessionStructure_PendingKeyExchange| { &m.local_identity_key_private },
                |m: &mut SessionStructure_PendingKeyExchange| { &mut m.local_identity_key_private },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SessionStructure_PendingKeyExchange>(
                "SessionStructure.PendingKeyExchange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SessionStructure_PendingKeyExchange {
        static instance: ::protobuf::rt::LazyV2<SessionStructure_PendingKeyExchange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SessionStructure_PendingKeyExchange::new)
    }
}

impl ::protobuf::Clear for SessionStructure_PendingKeyExchange {
    fn clear(&mut self) {
        self.sequence = 0;
        self.local_base_key.clear();
        self.local_base_key_private.clear();
        self.local_ratchet_key.clear();
        self.local_ratchet_key_private.clear();
        self.local_identity_key.clear();
        self.local_identity_key_private.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionStructure_PendingKeyExchange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionStructure_PendingKeyExchange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SessionStructure_PendingPreKey {
    // message fields
    pub pre_key_id: u32,
    pub signed_pre_key_id: i32,
    pub base_key: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionStructure_PendingPreKey {
    fn default() -> &'a SessionStructure_PendingPreKey {
        <SessionStructure_PendingPreKey as ::protobuf::Message>::default_instance()
    }
}

impl SessionStructure_PendingPreKey {
    pub fn new() -> SessionStructure_PendingPreKey {
        ::std::default::Default::default()
    }

    // uint32 pre_key_id = 1;


    pub fn get_pre_key_id(&self) -> u32 {
        self.pre_key_id
    }
    pub fn clear_pre_key_id(&mut self) {
        self.pre_key_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_pre_key_id(&mut self, v: u32) {
        self.pre_key_id = v;
    }

    // int32 signed_pre_key_id = 3;


    pub fn get_signed_pre_key_id(&self) -> i32 {
        self.signed_pre_key_id
    }
    pub fn clear_signed_pre_key_id(&mut self) {
        self.signed_pre_key_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_signed_pre_key_id(&mut self, v: i32) {
        self.signed_pre_key_id = v;
    }

    // bytes base_key = 2;


    pub fn get_base_key(&self) -> &[u8] {
        &self.base_key
    }
    pub fn clear_base_key(&mut self) {
        self.base_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.base_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.base_key
    }

    // Take field
    pub fn take_base_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.base_key, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SessionStructure_PendingPreKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.pre_key_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.signed_pre_key_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.base_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.pre_key_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.pre_key_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.signed_pre_key_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.signed_pre_key_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.base_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.base_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.pre_key_id != 0 {
            os.write_uint32(1, self.pre_key_id)?;
        }
        if self.signed_pre_key_id != 0 {
            os.write_int32(3, self.signed_pre_key_id)?;
        }
        if !self.base_key.is_empty() {
            os.write_bytes(2, &self.base_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionStructure_PendingPreKey {
        SessionStructure_PendingPreKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "pre_key_id",
                |m: &SessionStructure_PendingPreKey| { &m.pre_key_id },
                |m: &mut SessionStructure_PendingPreKey| { &mut m.pre_key_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "signed_pre_key_id",
                |m: &SessionStructure_PendingPreKey| { &m.signed_pre_key_id },
                |m: &mut SessionStructure_PendingPreKey| { &mut m.signed_pre_key_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "base_key",
                |m: &SessionStructure_PendingPreKey| { &m.base_key },
                |m: &mut SessionStructure_PendingPreKey| { &mut m.base_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SessionStructure_PendingPreKey>(
                "SessionStructure.PendingPreKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SessionStructure_PendingPreKey {
        static instance: ::protobuf::rt::LazyV2<SessionStructure_PendingPreKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SessionStructure_PendingPreKey::new)
    }
}

impl ::protobuf::Clear for SessionStructure_PendingPreKey {
    fn clear(&mut self) {
        self.pre_key_id = 0;
        self.signed_pre_key_id = 0;
        self.base_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionStructure_PendingPreKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionStructure_PendingPreKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct RecordStructure {
    // message fields
    pub current_session: ::protobuf::SingularPtrField<SessionStructure>,
    pub previous_sessions: ::protobuf::RepeatedField<SessionStructure>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecordStructure {
    fn default() -> &'a RecordStructure {
        <RecordStructure as ::protobuf::Message>::default_instance()
    }
}

impl RecordStructure {
    pub fn new() -> RecordStructure {
        ::std::default::Default::default()
    }

    // .signal.proto.storage.SessionStructure current_session = 1;


    pub fn get_current_session(&self) -> &SessionStructure {
        self.current_session.as_ref().unwrap_or_else(|| <SessionStructure as ::protobuf::Message>::default_instance())
    }
    pub fn clear_current_session(&mut self) {
        self.current_session.clear();
    }

    pub fn has_current_session(&self) -> bool {
        self.current_session.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_session(&mut self, v: SessionStructure) {
        self.current_session = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_current_session(&mut self) -> &mut SessionStructure {
        if self.current_session.is_none() {
            self.current_session.set_default();
        }
        self.current_session.as_mut().unwrap()
    }

    // Take field
    pub fn take_current_session(&mut self) -> SessionStructure {
        self.current_session.take().unwrap_or_else(|| SessionStructure::new())
    }

    // repeated .signal.proto.storage.SessionStructure previous_sessions = 2;


    pub fn get_previous_sessions(&self) -> &[SessionStructure] {
        &self.previous_sessions
    }
    pub fn clear_previous_sessions(&mut self) {
        self.previous_sessions.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_sessions(&mut self, v: ::protobuf::RepeatedField<SessionStructure>) {
        self.previous_sessions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_previous_sessions(&mut self) -> &mut ::protobuf::RepeatedField<SessionStructure> {
        &mut self.previous_sessions
    }

    // Take field
    pub fn take_previous_sessions(&mut self) -> ::protobuf::RepeatedField<SessionStructure> {
        ::std::mem::replace(&mut self.previous_sessions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RecordStructure {
    fn is_initialized(&self) -> bool {
        for v in &self.current_session {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.previous_sessions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.current_session)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.previous_sessions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.current_session.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.previous_sessions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.current_session.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.previous_sessions {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecordStructure {
        RecordStructure::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SessionStructure>>(
                "current_session",
                |m: &RecordStructure| { &m.current_session },
                |m: &mut RecordStructure| { &mut m.current_session },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SessionStructure>>(
                "previous_sessions",
                |m: &RecordStructure| { &m.previous_sessions },
                |m: &mut RecordStructure| { &mut m.previous_sessions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecordStructure>(
                "RecordStructure",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecordStructure {
        static instance: ::protobuf::rt::LazyV2<RecordStructure> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecordStructure::new)
    }
}

impl ::protobuf::Clear for RecordStructure {
    fn clear(&mut self) {
        self.current_session.clear();
        self.previous_sessions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecordStructure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecordStructure {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct PreKeyRecordStructure {
    // message fields
    pub id: u32,
    pub public_key: ::std::vec::Vec<u8>,
    pub private_key: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PreKeyRecordStructure {
    fn default() -> &'a PreKeyRecordStructure {
        <PreKeyRecordStructure as ::protobuf::Message>::default_instance()
    }
}

impl PreKeyRecordStructure {
    pub fn new() -> PreKeyRecordStructure {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // bytes public_key = 2;


    pub fn get_public_key(&self) -> &[u8] {
        &self.public_key
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.public_key
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.public_key, ::std::vec::Vec::new())
    }

    // bytes private_key = 3;


    pub fn get_private_key(&self) -> &[u8] {
        &self.private_key
    }
    pub fn clear_private_key(&mut self) {
        self.private_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_private_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.private_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.private_key
    }

    // Take field
    pub fn take_private_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.private_key, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PreKeyRecordStructure {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.private_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.public_key);
        }
        if !self.private_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.private_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if !self.public_key.is_empty() {
            os.write_bytes(2, &self.public_key)?;
        }
        if !self.private_key.is_empty() {
            os.write_bytes(3, &self.private_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PreKeyRecordStructure {
        PreKeyRecordStructure::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &PreKeyRecordStructure| { &m.id },
                |m: &mut PreKeyRecordStructure| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "public_key",
                |m: &PreKeyRecordStructure| { &m.public_key },
                |m: &mut PreKeyRecordStructure| { &mut m.public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "private_key",
                |m: &PreKeyRecordStructure| { &m.private_key },
                |m: &mut PreKeyRecordStructure| { &mut m.private_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PreKeyRecordStructure>(
                "PreKeyRecordStructure",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PreKeyRecordStructure {
        static instance: ::protobuf::rt::LazyV2<PreKeyRecordStructure> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PreKeyRecordStructure::new)
    }
}

impl ::protobuf::Clear for PreKeyRecordStructure {
    fn clear(&mut self) {
        self.id = 0;
        self.public_key.clear();
        self.private_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PreKeyRecordStructure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PreKeyRecordStructure {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SignedPreKeyRecordStructure {
    // message fields
    pub id: u32,
    pub public_key: ::std::vec::Vec<u8>,
    pub private_key: ::std::vec::Vec<u8>,
    pub signature: ::std::vec::Vec<u8>,
    pub timestamp: u64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignedPreKeyRecordStructure {
    fn default() -> &'a SignedPreKeyRecordStructure {
        <SignedPreKeyRecordStructure as ::protobuf::Message>::default_instance()
    }
}

impl SignedPreKeyRecordStructure {
    pub fn new() -> SignedPreKeyRecordStructure {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // bytes public_key = 2;


    pub fn get_public_key(&self) -> &[u8] {
        &self.public_key
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.public_key
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.public_key, ::std::vec::Vec::new())
    }

    // bytes private_key = 3;


    pub fn get_private_key(&self) -> &[u8] {
        &self.private_key
    }
    pub fn clear_private_key(&mut self) {
        self.private_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_private_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.private_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.private_key
    }

    // Take field
    pub fn take_private_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.private_key, ::std::vec::Vec::new())
    }

    // bytes signature = 4;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }

    // fixed64 timestamp = 5;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for SignedPreKeyRecordStructure {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.private_key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.public_key);
        }
        if !self.private_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.private_key);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.signature);
        }
        if self.timestamp != 0 {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if !self.public_key.is_empty() {
            os.write_bytes(2, &self.public_key)?;
        }
        if !self.private_key.is_empty() {
            os.write_bytes(3, &self.private_key)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(4, &self.signature)?;
        }
        if self.timestamp != 0 {
            os.write_fixed64(5, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedPreKeyRecordStructure {
        SignedPreKeyRecordStructure::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &SignedPreKeyRecordStructure| { &m.id },
                |m: &mut SignedPreKeyRecordStructure| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "public_key",
                |m: &SignedPreKeyRecordStructure| { &m.public_key },
                |m: &mut SignedPreKeyRecordStructure| { &mut m.public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "private_key",
                |m: &SignedPreKeyRecordStructure| { &m.private_key },
                |m: &mut SignedPreKeyRecordStructure| { &mut m.private_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &SignedPreKeyRecordStructure| { &m.signature },
                |m: &mut SignedPreKeyRecordStructure| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "timestamp",
                |m: &SignedPreKeyRecordStructure| { &m.timestamp },
                |m: &mut SignedPreKeyRecordStructure| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignedPreKeyRecordStructure>(
                "SignedPreKeyRecordStructure",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignedPreKeyRecordStructure {
        static instance: ::protobuf::rt::LazyV2<SignedPreKeyRecordStructure> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignedPreKeyRecordStructure::new)
    }
}

impl ::protobuf::Clear for SignedPreKeyRecordStructure {
    fn clear(&mut self) {
        self.id = 0;
        self.public_key.clear();
        self.private_key.clear();
        self.signature.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedPreKeyRecordStructure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedPreKeyRecordStructure {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct IdentityKeyPairStructure {
    // message fields
    pub public_key: ::std::vec::Vec<u8>,
    pub private_key: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IdentityKeyPairStructure {
    fn default() -> &'a IdentityKeyPairStructure {
        <IdentityKeyPairStructure as ::protobuf::Message>::default_instance()
    }
}

impl IdentityKeyPairStructure {
    pub fn new() -> IdentityKeyPairStructure {
        ::std::default::Default::default()
    }

    // bytes public_key = 1;


    pub fn get_public_key(&self) -> &[u8] {
        &self.public_key
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.public_key
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.public_key, ::std::vec::Vec::new())
    }

    // bytes private_key = 2;


    pub fn get_private_key(&self) -> &[u8] {
        &self.private_key
    }
    pub fn clear_private_key(&mut self) {
        self.private_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_private_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.private_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.private_key
    }

    // Take field
    pub fn take_private_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.private_key, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IdentityKeyPairStructure {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.private_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.public_key);
        }
        if !self.private_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.private_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.public_key.is_empty() {
            os.write_bytes(1, &self.public_key)?;
        }
        if !self.private_key.is_empty() {
            os.write_bytes(2, &self.private_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IdentityKeyPairStructure {
        IdentityKeyPairStructure::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "public_key",
                |m: &IdentityKeyPairStructure| { &m.public_key },
                |m: &mut IdentityKeyPairStructure| { &mut m.public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "private_key",
                |m: &IdentityKeyPairStructure| { &m.private_key },
                |m: &mut IdentityKeyPairStructure| { &mut m.private_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IdentityKeyPairStructure>(
                "IdentityKeyPairStructure",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IdentityKeyPairStructure {
        static instance: ::protobuf::rt::LazyV2<IdentityKeyPairStructure> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IdentityKeyPairStructure::new)
    }
}

impl ::protobuf::Clear for IdentityKeyPairStructure {
    fn clear(&mut self) {
        self.public_key.clear();
        self.private_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IdentityKeyPairStructure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdentityKeyPairStructure {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SenderKeyStateStructure {
    // message fields
    pub sender_key_id: u32,
    pub sender_chain_key: ::protobuf::SingularPtrField<SenderKeyStateStructure_SenderChainKey>,
    pub sender_signing_key: ::protobuf::SingularPtrField<SenderKeyStateStructure_SenderSigningKey>,
    pub sender_message_keys: ::protobuf::RepeatedField<SenderKeyStateStructure_SenderMessageKey>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SenderKeyStateStructure {
    fn default() -> &'a SenderKeyStateStructure {
        <SenderKeyStateStructure as ::protobuf::Message>::default_instance()
    }
}

impl SenderKeyStateStructure {
    pub fn new() -> SenderKeyStateStructure {
        ::std::default::Default::default()
    }

    // uint32 sender_key_id = 1;


    pub fn get_sender_key_id(&self) -> u32 {
        self.sender_key_id
    }
    pub fn clear_sender_key_id(&mut self) {
        self.sender_key_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_sender_key_id(&mut self, v: u32) {
        self.sender_key_id = v;
    }

    // .signal.proto.storage.SenderKeyStateStructure.SenderChainKey sender_chain_key = 2;


    pub fn get_sender_chain_key(&self) -> &SenderKeyStateStructure_SenderChainKey {
        self.sender_chain_key.as_ref().unwrap_or_else(|| <SenderKeyStateStructure_SenderChainKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sender_chain_key(&mut self) {
        self.sender_chain_key.clear();
    }

    pub fn has_sender_chain_key(&self) -> bool {
        self.sender_chain_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender_chain_key(&mut self, v: SenderKeyStateStructure_SenderChainKey) {
        self.sender_chain_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_chain_key(&mut self) -> &mut SenderKeyStateStructure_SenderChainKey {
        if self.sender_chain_key.is_none() {
            self.sender_chain_key.set_default();
        }
        self.sender_chain_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_sender_chain_key(&mut self) -> SenderKeyStateStructure_SenderChainKey {
        self.sender_chain_key.take().unwrap_or_else(|| SenderKeyStateStructure_SenderChainKey::new())
    }

    // .signal.proto.storage.SenderKeyStateStructure.SenderSigningKey sender_signing_key = 3;


    pub fn get_sender_signing_key(&self) -> &SenderKeyStateStructure_SenderSigningKey {
        self.sender_signing_key.as_ref().unwrap_or_else(|| <SenderKeyStateStructure_SenderSigningKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sender_signing_key(&mut self) {
        self.sender_signing_key.clear();
    }

    pub fn has_sender_signing_key(&self) -> bool {
        self.sender_signing_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender_signing_key(&mut self, v: SenderKeyStateStructure_SenderSigningKey) {
        self.sender_signing_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_signing_key(&mut self) -> &mut SenderKeyStateStructure_SenderSigningKey {
        if self.sender_signing_key.is_none() {
            self.sender_signing_key.set_default();
        }
        self.sender_signing_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_sender_signing_key(&mut self) -> SenderKeyStateStructure_SenderSigningKey {
        self.sender_signing_key.take().unwrap_or_else(|| SenderKeyStateStructure_SenderSigningKey::new())
    }

    // repeated .signal.proto.storage.SenderKeyStateStructure.SenderMessageKey sender_message_keys = 4;


    pub fn get_sender_message_keys(&self) -> &[SenderKeyStateStructure_SenderMessageKey] {
        &self.sender_message_keys
    }
    pub fn clear_sender_message_keys(&mut self) {
        self.sender_message_keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender_message_keys(&mut self, v: ::protobuf::RepeatedField<SenderKeyStateStructure_SenderMessageKey>) {
        self.sender_message_keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sender_message_keys(&mut self) -> &mut ::protobuf::RepeatedField<SenderKeyStateStructure_SenderMessageKey> {
        &mut self.sender_message_keys
    }

    // Take field
    pub fn take_sender_message_keys(&mut self) -> ::protobuf::RepeatedField<SenderKeyStateStructure_SenderMessageKey> {
        ::std::mem::replace(&mut self.sender_message_keys, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SenderKeyStateStructure {
    fn is_initialized(&self) -> bool {
        for v in &self.sender_chain_key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sender_signing_key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sender_message_keys {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sender_key_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sender_chain_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sender_signing_key)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sender_message_keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sender_key_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sender_key_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.sender_chain_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.sender_signing_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.sender_message_keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sender_key_id != 0 {
            os.write_uint32(1, self.sender_key_id)?;
        }
        if let Some(ref v) = self.sender_chain_key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.sender_signing_key.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.sender_message_keys {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SenderKeyStateStructure {
        SenderKeyStateStructure::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "sender_key_id",
                |m: &SenderKeyStateStructure| { &m.sender_key_id },
                |m: &mut SenderKeyStateStructure| { &mut m.sender_key_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SenderKeyStateStructure_SenderChainKey>>(
                "sender_chain_key",
                |m: &SenderKeyStateStructure| { &m.sender_chain_key },
                |m: &mut SenderKeyStateStructure| { &mut m.sender_chain_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SenderKeyStateStructure_SenderSigningKey>>(
                "sender_signing_key",
                |m: &SenderKeyStateStructure| { &m.sender_signing_key },
                |m: &mut SenderKeyStateStructure| { &mut m.sender_signing_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SenderKeyStateStructure_SenderMessageKey>>(
                "sender_message_keys",
                |m: &SenderKeyStateStructure| { &m.sender_message_keys },
                |m: &mut SenderKeyStateStructure| { &mut m.sender_message_keys },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SenderKeyStateStructure>(
                "SenderKeyStateStructure",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SenderKeyStateStructure {
        static instance: ::protobuf::rt::LazyV2<SenderKeyStateStructure> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SenderKeyStateStructure::new)
    }
}

impl ::protobuf::Clear for SenderKeyStateStructure {
    fn clear(&mut self) {
        self.sender_key_id = 0;
        self.sender_chain_key.clear();
        self.sender_signing_key.clear();
        self.sender_message_keys.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SenderKeyStateStructure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SenderKeyStateStructure {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SenderKeyStateStructure_SenderChainKey {
    // message fields
    pub iteration: u32,
    pub seed: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SenderKeyStateStructure_SenderChainKey {
    fn default() -> &'a SenderKeyStateStructure_SenderChainKey {
        <SenderKeyStateStructure_SenderChainKey as ::protobuf::Message>::default_instance()
    }
}

impl SenderKeyStateStructure_SenderChainKey {
    pub fn new() -> SenderKeyStateStructure_SenderChainKey {
        ::std::default::Default::default()
    }

    // uint32 iteration = 1;


    pub fn get_iteration(&self) -> u32 {
        self.iteration
    }
    pub fn clear_iteration(&mut self) {
        self.iteration = 0;
    }

    // Param is passed by value, moved
    pub fn set_iteration(&mut self, v: u32) {
        self.iteration = v;
    }

    // bytes seed = 2;


    pub fn get_seed(&self) -> &[u8] {
        &self.seed
    }
    pub fn clear_seed(&mut self) {
        self.seed.clear();
    }

    // Param is passed by value, moved
    pub fn set_seed(&mut self, v: ::std::vec::Vec<u8>) {
        self.seed = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seed(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.seed
    }

    // Take field
    pub fn take_seed(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.seed, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SenderKeyStateStructure_SenderChainKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.iteration = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.seed)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.iteration != 0 {
            my_size += ::protobuf::rt::value_size(1, self.iteration, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.seed.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.seed);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.iteration != 0 {
            os.write_uint32(1, self.iteration)?;
        }
        if !self.seed.is_empty() {
            os.write_bytes(2, &self.seed)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SenderKeyStateStructure_SenderChainKey {
        SenderKeyStateStructure_SenderChainKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "iteration",
                |m: &SenderKeyStateStructure_SenderChainKey| { &m.iteration },
                |m: &mut SenderKeyStateStructure_SenderChainKey| { &mut m.iteration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "seed",
                |m: &SenderKeyStateStructure_SenderChainKey| { &m.seed },
                |m: &mut SenderKeyStateStructure_SenderChainKey| { &mut m.seed },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SenderKeyStateStructure_SenderChainKey>(
                "SenderKeyStateStructure.SenderChainKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SenderKeyStateStructure_SenderChainKey {
        static instance: ::protobuf::rt::LazyV2<SenderKeyStateStructure_SenderChainKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SenderKeyStateStructure_SenderChainKey::new)
    }
}

impl ::protobuf::Clear for SenderKeyStateStructure_SenderChainKey {
    fn clear(&mut self) {
        self.iteration = 0;
        self.seed.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SenderKeyStateStructure_SenderChainKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SenderKeyStateStructure_SenderChainKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SenderKeyStateStructure_SenderMessageKey {
    // message fields
    pub iteration: u32,
    pub seed: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SenderKeyStateStructure_SenderMessageKey {
    fn default() -> &'a SenderKeyStateStructure_SenderMessageKey {
        <SenderKeyStateStructure_SenderMessageKey as ::protobuf::Message>::default_instance()
    }
}

impl SenderKeyStateStructure_SenderMessageKey {
    pub fn new() -> SenderKeyStateStructure_SenderMessageKey {
        ::std::default::Default::default()
    }

    // uint32 iteration = 1;


    pub fn get_iteration(&self) -> u32 {
        self.iteration
    }
    pub fn clear_iteration(&mut self) {
        self.iteration = 0;
    }

    // Param is passed by value, moved
    pub fn set_iteration(&mut self, v: u32) {
        self.iteration = v;
    }

    // bytes seed = 2;


    pub fn get_seed(&self) -> &[u8] {
        &self.seed
    }
    pub fn clear_seed(&mut self) {
        self.seed.clear();
    }

    // Param is passed by value, moved
    pub fn set_seed(&mut self, v: ::std::vec::Vec<u8>) {
        self.seed = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seed(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.seed
    }

    // Take field
    pub fn take_seed(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.seed, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SenderKeyStateStructure_SenderMessageKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.iteration = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.seed)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.iteration != 0 {
            my_size += ::protobuf::rt::value_size(1, self.iteration, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.seed.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.seed);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.iteration != 0 {
            os.write_uint32(1, self.iteration)?;
        }
        if !self.seed.is_empty() {
            os.write_bytes(2, &self.seed)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SenderKeyStateStructure_SenderMessageKey {
        SenderKeyStateStructure_SenderMessageKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "iteration",
                |m: &SenderKeyStateStructure_SenderMessageKey| { &m.iteration },
                |m: &mut SenderKeyStateStructure_SenderMessageKey| { &mut m.iteration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "seed",
                |m: &SenderKeyStateStructure_SenderMessageKey| { &m.seed },
                |m: &mut SenderKeyStateStructure_SenderMessageKey| { &mut m.seed },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SenderKeyStateStructure_SenderMessageKey>(
                "SenderKeyStateStructure.SenderMessageKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SenderKeyStateStructure_SenderMessageKey {
        static instance: ::protobuf::rt::LazyV2<SenderKeyStateStructure_SenderMessageKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SenderKeyStateStructure_SenderMessageKey::new)
    }
}

impl ::protobuf::Clear for SenderKeyStateStructure_SenderMessageKey {
    fn clear(&mut self) {
        self.iteration = 0;
        self.seed.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SenderKeyStateStructure_SenderMessageKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SenderKeyStateStructure_SenderMessageKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SenderKeyStateStructure_SenderSigningKey {
    // message fields
    pub public: ::std::vec::Vec<u8>,
    pub private: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SenderKeyStateStructure_SenderSigningKey {
    fn default() -> &'a SenderKeyStateStructure_SenderSigningKey {
        <SenderKeyStateStructure_SenderSigningKey as ::protobuf::Message>::default_instance()
    }
}

impl SenderKeyStateStructure_SenderSigningKey {
    pub fn new() -> SenderKeyStateStructure_SenderSigningKey {
        ::std::default::Default::default()
    }

    // bytes public = 1;


    pub fn get_public(&self) -> &[u8] {
        &self.public
    }
    pub fn clear_public(&mut self) {
        self.public.clear();
    }

    // Param is passed by value, moved
    pub fn set_public(&mut self, v: ::std::vec::Vec<u8>) {
        self.public = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.public
    }

    // Take field
    pub fn take_public(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.public, ::std::vec::Vec::new())
    }

    // bytes private = 2;


    pub fn get_private(&self) -> &[u8] {
        &self.private
    }
    pub fn clear_private(&mut self) {
        self.private.clear();
    }

    // Param is passed by value, moved
    pub fn set_private(&mut self, v: ::std::vec::Vec<u8>) {
        self.private = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.private
    }

    // Take field
    pub fn take_private(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.private, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SenderKeyStateStructure_SenderSigningKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.public)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.private)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.public.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.public);
        }
        if !self.private.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.private);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.public.is_empty() {
            os.write_bytes(1, &self.public)?;
        }
        if !self.private.is_empty() {
            os.write_bytes(2, &self.private)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SenderKeyStateStructure_SenderSigningKey {
        SenderKeyStateStructure_SenderSigningKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "public",
                |m: &SenderKeyStateStructure_SenderSigningKey| { &m.public },
                |m: &mut SenderKeyStateStructure_SenderSigningKey| { &mut m.public },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "private",
                |m: &SenderKeyStateStructure_SenderSigningKey| { &m.private },
                |m: &mut SenderKeyStateStructure_SenderSigningKey| { &mut m.private },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SenderKeyStateStructure_SenderSigningKey>(
                "SenderKeyStateStructure.SenderSigningKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SenderKeyStateStructure_SenderSigningKey {
        static instance: ::protobuf::rt::LazyV2<SenderKeyStateStructure_SenderSigningKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SenderKeyStateStructure_SenderSigningKey::new)
    }
}

impl ::protobuf::Clear for SenderKeyStateStructure_SenderSigningKey {
    fn clear(&mut self) {
        self.public.clear();
        self.private.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SenderKeyStateStructure_SenderSigningKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SenderKeyStateStructure_SenderSigningKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SenderKeyRecordStructure {
    // message fields
    pub sender_key_states: ::protobuf::RepeatedField<SenderKeyStateStructure>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SenderKeyRecordStructure {
    fn default() -> &'a SenderKeyRecordStructure {
        <SenderKeyRecordStructure as ::protobuf::Message>::default_instance()
    }
}

impl SenderKeyRecordStructure {
    pub fn new() -> SenderKeyRecordStructure {
        ::std::default::Default::default()
    }

    // repeated .signal.proto.storage.SenderKeyStateStructure sender_key_states = 1;


    pub fn get_sender_key_states(&self) -> &[SenderKeyStateStructure] {
        &self.sender_key_states
    }
    pub fn clear_sender_key_states(&mut self) {
        self.sender_key_states.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender_key_states(&mut self, v: ::protobuf::RepeatedField<SenderKeyStateStructure>) {
        self.sender_key_states = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sender_key_states(&mut self) -> &mut ::protobuf::RepeatedField<SenderKeyStateStructure> {
        &mut self.sender_key_states
    }

    // Take field
    pub fn take_sender_key_states(&mut self) -> ::protobuf::RepeatedField<SenderKeyStateStructure> {
        ::std::mem::replace(&mut self.sender_key_states, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SenderKeyRecordStructure {
    fn is_initialized(&self) -> bool {
        for v in &self.sender_key_states {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sender_key_states)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.sender_key_states {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.sender_key_states {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SenderKeyRecordStructure {
        SenderKeyRecordStructure::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SenderKeyStateStructure>>(
                "sender_key_states",
                |m: &SenderKeyRecordStructure| { &m.sender_key_states },
                |m: &mut SenderKeyRecordStructure| { &mut m.sender_key_states },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SenderKeyRecordStructure>(
                "SenderKeyRecordStructure",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SenderKeyRecordStructure {
        static instance: ::protobuf::rt::LazyV2<SenderKeyRecordStructure> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SenderKeyRecordStructure::new)
    }
}

impl ::protobuf::Clear for SenderKeyRecordStructure {
    fn clear(&mut self) {
        self.sender_key_states.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SenderKeyRecordStructure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SenderKeyRecordStructure {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rstorage.proto\x12\x14signal.proto.storage\"\xfb\r\n\x10SessionStruct\
    ure\x12)\n\x0fsession_version\x18\x01\x20\x01(\rR\x0esessionVersionB\0\
    \x124\n\x15local_identity_public\x18\x02\x20\x01(\x0cR\x13localIdentityP\
    ublicB\0\x126\n\x16remote_identity_public\x18\x03\x20\x01(\x0cR\x14remot\
    eIdentityPublicB\0\x12\x1b\n\x08root_key\x18\x04\x20\x01(\x0cR\x07rootKe\
    yB\0\x12+\n\x10previous_counter\x18\x05\x20\x01(\rR\x0fpreviousCounterB\
    \0\x12Q\n\x0csender_chain\x18\x06\x20\x01(\x0b2,.signal.proto.storage.Se\
    ssionStructure.ChainR\x0bsenderChainB\0\x12W\n\x0freceiver_chains\x18\
    \x07\x20\x03(\x0b2,.signal.proto.storage.SessionStructure.ChainR\x0erece\
    iverChainsB\0\x12m\n\x14pending_key_exchange\x18\x08\x20\x01(\x0b29.sign\
    al.proto.storage.SessionStructure.PendingKeyExchangeR\x12pendingKeyExcha\
    ngeB\0\x12^\n\x0fpending_pre_key\x18\t\x20\x01(\x0b24.signal.proto.stora\
    ge.SessionStructure.PendingPreKeyR\rpendingPreKeyB\0\x126\n\x16remote_re\
    gistration_id\x18\n\x20\x01(\rR\x14remoteRegistrationIdB\0\x124\n\x15loc\
    al_registration_id\x18\x0b\x20\x01(\rR\x13localRegistrationIdB\0\x12%\n\
    \rneeds_refresh\x18\x0c\x20\x01(\x08R\x0cneedsRefreshB\0\x12&\n\x0ealice\
    _base_key\x18\r\x20\x01(\x0cR\x0caliceBaseKeyB\0\x1a\xdc\x03\n\x05Chain\
    \x12.\n\x12sender_ratchet_key\x18\x01\x20\x01(\x0cR\x10senderRatchetKeyB\
    \0\x12=\n\x1asender_ratchet_key_private\x18\x02\x20\x01(\x0cR\x17senderR\
    atchetKeyPrivateB\0\x12T\n\tchain_key\x18\x03\x20\x01(\x0b25.signal.prot\
    o.storage.SessionStructure.Chain.ChainKeyR\x08chainKeyB\0\x12\\\n\x0cmes\
    sage_keys\x18\x04\x20\x03(\x0b27.signal.proto.storage.SessionStructure.C\
    hain.MessageKeyR\x0bmessageKeysB\0\x1a8\n\x08ChainKey\x12\x16\n\x05index\
    \x18\x01\x20\x01(\rR\x05indexB\0\x12\x12\n\x03key\x18\x02\x20\x01(\x0cR\
    \x03keyB\0:\0\x1at\n\nMessageKey\x12\x16\n\x05index\x18\x01\x20\x01(\rR\
    \x05indexB\0\x12\x1f\n\ncipher_key\x18\x02\x20\x01(\x0cR\tcipherKeyB\0\
    \x12\x19\n\x07mac_key\x18\x03\x20\x01(\x0cR\x06macKeyB\0\x12\x10\n\x02iv\
    \x18\x04\x20\x01(\x0cR\x02ivB\0:\0:\0\x1a\xed\x02\n\x12PendingKeyExchang\
    e\x12\x1c\n\x08sequence\x18\x01\x20\x01(\rR\x08sequenceB\0\x12&\n\x0eloc\
    al_base_key\x18\x02\x20\x01(\x0cR\x0clocalBaseKeyB\0\x125\n\x16local_bas\
    e_key_private\x18\x03\x20\x01(\x0cR\x13localBaseKeyPrivateB\0\x12,\n\x11\
    local_ratchet_key\x18\x04\x20\x01(\x0cR\x0flocalRatchetKeyB\0\x12;\n\x19\
    local_ratchet_key_private\x18\x05\x20\x01(\x0cR\x16localRatchetKeyPrivat\
    eB\0\x12.\n\x12local_identity_key\x18\x07\x20\x01(\x0cR\x10localIdentity\
    KeyB\0\x12=\n\x1alocal_identity_key_private\x18\x08\x20\x01(\x0cR\x17loc\
    alIdentityKeyPrivateB\0:\0\x1a{\n\rPendingPreKey\x12\x1e\n\npre_key_id\
    \x18\x01\x20\x01(\rR\x08preKeyIdB\0\x12+\n\x11signed_pre_key_id\x18\x03\
    \x20\x01(\x05R\x0esignedPreKeyIdB\0\x12\x1b\n\x08base_key\x18\x02\x20\
    \x01(\x0cR\x07baseKeyB\0:\0:\0\"\xbd\x01\n\x0fRecordStructure\x12Q\n\x0f\
    current_session\x18\x01\x20\x01(\x0b2&.signal.proto.storage.SessionStruc\
    tureR\x0ecurrentSessionB\0\x12U\n\x11previous_sessions\x18\x02\x20\x03(\
    \x0b2&.signal.proto.storage.SessionStructureR\x10previousSessionsB\0:\0\
    \"o\n\x15PreKeyRecordStructure\x12\x10\n\x02id\x18\x01\x20\x01(\rR\x02id\
    B\0\x12\x1f\n\npublic_key\x18\x02\x20\x01(\x0cR\tpublicKeyB\0\x12!\n\x0b\
    private_key\x18\x03\x20\x01(\x0cR\nprivateKeyB\0:\0\"\xb5\x01\n\x1bSigne\
    dPreKeyRecordStructure\x12\x10\n\x02id\x18\x01\x20\x01(\rR\x02idB\0\x12\
    \x1f\n\npublic_key\x18\x02\x20\x01(\x0cR\tpublicKeyB\0\x12!\n\x0bprivate\
    _key\x18\x03\x20\x01(\x0cR\nprivateKeyB\0\x12\x1e\n\tsignature\x18\x04\
    \x20\x01(\x0cR\tsignatureB\0\x12\x1e\n\ttimestamp\x18\x05\x20\x01(\x06R\
    \ttimestampB\0:\0\"`\n\x18IdentityKeyPairStructure\x12\x1f\n\npublic_key\
    \x18\x01\x20\x01(\x0cR\tpublicKeyB\0\x12!\n\x0bprivate_key\x18\x02\x20\
    \x01(\x0cR\nprivateKeyB\0:\0\"\xef\x04\n\x17SenderKeyStateStructure\x12$\
    \n\rsender_key_id\x18\x01\x20\x01(\rR\x0bsenderKeyIdB\0\x12h\n\x10sender\
    _chain_key\x18\x02\x20\x01(\x0b2<.signal.proto.storage.SenderKeyStateStr\
    ucture.SenderChainKeyR\x0esenderChainKeyB\0\x12n\n\x12sender_signing_key\
    \x18\x03\x20\x01(\x0b2>.signal.proto.storage.SenderKeyStateStructure.Sen\
    derSigningKeyR\x10senderSigningKeyB\0\x12p\n\x13sender_message_keys\x18\
    \x04\x20\x03(\x0b2>.signal.proto.storage.SenderKeyStateStructure.SenderM\
    essageKeyR\x11senderMessageKeysB\0\x1aH\n\x0eSenderChainKey\x12\x1e\n\ti\
    teration\x18\x01\x20\x01(\rR\titerationB\0\x12\x14\n\x04seed\x18\x02\x20\
    \x01(\x0cR\x04seedB\0:\0\x1aJ\n\x10SenderMessageKey\x12\x1e\n\titeration\
    \x18\x01\x20\x01(\rR\titerationB\0\x12\x14\n\x04seed\x18\x02\x20\x01(\
    \x0cR\x04seedB\0:\0\x1aJ\n\x10SenderSigningKey\x12\x18\n\x06public\x18\
    \x01\x20\x01(\x0cR\x06publicB\0\x12\x1a\n\x07private\x18\x02\x20\x01(\
    \x0cR\x07privateB\0:\0:\0\"y\n\x18SenderKeyRecordStructure\x12[\n\x11sen\
    der_key_states\x18\x01\x20\x03(\x0b2-.signal.proto.storage.SenderKeyStat\
    eStructureR\x0fsenderKeyStatesB\0:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
