// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `decrypted_groups.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DecryptedMember {
    // message fields
    pub uuid: ::std::vec::Vec<u8>,
    pub role: super::groups::Member_Role,
    pub profileKey: ::std::vec::Vec<u8>,
    pub joinedAtRevision: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DecryptedMember {
    fn default() -> &'a DecryptedMember {
        <DecryptedMember as ::protobuf::Message>::default_instance()
    }
}

impl DecryptedMember {
    pub fn new() -> DecryptedMember {
        ::std::default::Default::default()
    }

    // bytes uuid = 1;


    pub fn get_uuid(&self) -> &[u8] {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::vec::Vec<u8>) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.uuid, ::std::vec::Vec::new())
    }

    // .signalservice.Member.Role role = 2;


    pub fn get_role(&self) -> super::groups::Member_Role {
        self.role
    }
    pub fn clear_role(&mut self) {
        self.role = super::groups::Member_Role::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: super::groups::Member_Role) {
        self.role = v;
    }

    // bytes profileKey = 3;


    pub fn get_profileKey(&self) -> &[u8] {
        &self.profileKey
    }
    pub fn clear_profileKey(&mut self) {
        self.profileKey.clear();
    }

    // Param is passed by value, moved
    pub fn set_profileKey(&mut self, v: ::std::vec::Vec<u8>) {
        self.profileKey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_profileKey(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.profileKey
    }

    // Take field
    pub fn take_profileKey(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.profileKey, ::std::vec::Vec::new())
    }

    // uint32 joinedAtRevision = 5;


    pub fn get_joinedAtRevision(&self) -> u32 {
        self.joinedAtRevision
    }
    pub fn clear_joinedAtRevision(&mut self) {
        self.joinedAtRevision = 0;
    }

    // Param is passed by value, moved
    pub fn set_joinedAtRevision(&mut self, v: u32) {
        self.joinedAtRevision = v;
    }
}

impl ::protobuf::Message for DecryptedMember {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.uuid)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.role, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.profileKey)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.joinedAtRevision = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.uuid);
        }
        if self.role != super::groups::Member_Role::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(2, self.role);
        }
        if !self.profileKey.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.profileKey);
        }
        if self.joinedAtRevision != 0 {
            my_size += ::protobuf::rt::value_size(5, self.joinedAtRevision, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_bytes(1, &self.uuid)?;
        }
        if self.role != super::groups::Member_Role::UNKNOWN {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.role))?;
        }
        if !self.profileKey.is_empty() {
            os.write_bytes(3, &self.profileKey)?;
        }
        if self.joinedAtRevision != 0 {
            os.write_uint32(5, self.joinedAtRevision)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DecryptedMember {
        DecryptedMember::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "uuid",
                |m: &DecryptedMember| { &m.uuid },
                |m: &mut DecryptedMember| { &mut m.uuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::groups::Member_Role>>(
                "role",
                |m: &DecryptedMember| { &m.role },
                |m: &mut DecryptedMember| { &mut m.role },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "profileKey",
                |m: &DecryptedMember| { &m.profileKey },
                |m: &mut DecryptedMember| { &mut m.profileKey },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "joinedAtRevision",
                |m: &DecryptedMember| { &m.joinedAtRevision },
                |m: &mut DecryptedMember| { &mut m.joinedAtRevision },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DecryptedMember>(
                "DecryptedMember",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DecryptedMember {
        static instance: ::protobuf::rt::LazyV2<DecryptedMember> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DecryptedMember::new)
    }
}

impl ::protobuf::Clear for DecryptedMember {
    fn clear(&mut self) {
        self.uuid.clear();
        self.role = super::groups::Member_Role::UNKNOWN;
        self.profileKey.clear();
        self.joinedAtRevision = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DecryptedMember {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptedMember {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DecryptedPendingMember {
    // message fields
    pub uuid: ::std::vec::Vec<u8>,
    pub role: super::groups::Member_Role,
    pub addedByUuid: ::std::vec::Vec<u8>,
    pub timestamp: u64,
    pub uuidCipherText: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DecryptedPendingMember {
    fn default() -> &'a DecryptedPendingMember {
        <DecryptedPendingMember as ::protobuf::Message>::default_instance()
    }
}

impl DecryptedPendingMember {
    pub fn new() -> DecryptedPendingMember {
        ::std::default::Default::default()
    }

    // bytes uuid = 1;


    pub fn get_uuid(&self) -> &[u8] {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::vec::Vec<u8>) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.uuid, ::std::vec::Vec::new())
    }

    // .signalservice.Member.Role role = 2;


    pub fn get_role(&self) -> super::groups::Member_Role {
        self.role
    }
    pub fn clear_role(&mut self) {
        self.role = super::groups::Member_Role::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: super::groups::Member_Role) {
        self.role = v;
    }

    // bytes addedByUuid = 3;


    pub fn get_addedByUuid(&self) -> &[u8] {
        &self.addedByUuid
    }
    pub fn clear_addedByUuid(&mut self) {
        self.addedByUuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_addedByUuid(&mut self, v: ::std::vec::Vec<u8>) {
        self.addedByUuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addedByUuid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.addedByUuid
    }

    // Take field
    pub fn take_addedByUuid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.addedByUuid, ::std::vec::Vec::new())
    }

    // uint64 timestamp = 4;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // bytes uuidCipherText = 5;


    pub fn get_uuidCipherText(&self) -> &[u8] {
        &self.uuidCipherText
    }
    pub fn clear_uuidCipherText(&mut self) {
        self.uuidCipherText.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuidCipherText(&mut self, v: ::std::vec::Vec<u8>) {
        self.uuidCipherText = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuidCipherText(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.uuidCipherText
    }

    // Take field
    pub fn take_uuidCipherText(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.uuidCipherText, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DecryptedPendingMember {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.uuid)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.role, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.addedByUuid)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.uuidCipherText)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.uuid);
        }
        if self.role != super::groups::Member_Role::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(2, self.role);
        }
        if !self.addedByUuid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.addedByUuid);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(4, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.uuidCipherText.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.uuidCipherText);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_bytes(1, &self.uuid)?;
        }
        if self.role != super::groups::Member_Role::UNKNOWN {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.role))?;
        }
        if !self.addedByUuid.is_empty() {
            os.write_bytes(3, &self.addedByUuid)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(4, self.timestamp)?;
        }
        if !self.uuidCipherText.is_empty() {
            os.write_bytes(5, &self.uuidCipherText)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DecryptedPendingMember {
        DecryptedPendingMember::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "uuid",
                |m: &DecryptedPendingMember| { &m.uuid },
                |m: &mut DecryptedPendingMember| { &mut m.uuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::groups::Member_Role>>(
                "role",
                |m: &DecryptedPendingMember| { &m.role },
                |m: &mut DecryptedPendingMember| { &mut m.role },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "addedByUuid",
                |m: &DecryptedPendingMember| { &m.addedByUuid },
                |m: &mut DecryptedPendingMember| { &mut m.addedByUuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &DecryptedPendingMember| { &m.timestamp },
                |m: &mut DecryptedPendingMember| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "uuidCipherText",
                |m: &DecryptedPendingMember| { &m.uuidCipherText },
                |m: &mut DecryptedPendingMember| { &mut m.uuidCipherText },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DecryptedPendingMember>(
                "DecryptedPendingMember",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DecryptedPendingMember {
        static instance: ::protobuf::rt::LazyV2<DecryptedPendingMember> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DecryptedPendingMember::new)
    }
}

impl ::protobuf::Clear for DecryptedPendingMember {
    fn clear(&mut self) {
        self.uuid.clear();
        self.role = super::groups::Member_Role::UNKNOWN;
        self.addedByUuid.clear();
        self.timestamp = 0;
        self.uuidCipherText.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DecryptedPendingMember {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptedPendingMember {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DecryptedRequestingMember {
    // message fields
    pub uuid: ::std::vec::Vec<u8>,
    pub profileKey: ::std::vec::Vec<u8>,
    pub timestamp: u64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DecryptedRequestingMember {
    fn default() -> &'a DecryptedRequestingMember {
        <DecryptedRequestingMember as ::protobuf::Message>::default_instance()
    }
}

impl DecryptedRequestingMember {
    pub fn new() -> DecryptedRequestingMember {
        ::std::default::Default::default()
    }

    // bytes uuid = 1;


    pub fn get_uuid(&self) -> &[u8] {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::vec::Vec<u8>) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.uuid, ::std::vec::Vec::new())
    }

    // bytes profileKey = 2;


    pub fn get_profileKey(&self) -> &[u8] {
        &self.profileKey
    }
    pub fn clear_profileKey(&mut self) {
        self.profileKey.clear();
    }

    // Param is passed by value, moved
    pub fn set_profileKey(&mut self, v: ::std::vec::Vec<u8>) {
        self.profileKey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_profileKey(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.profileKey
    }

    // Take field
    pub fn take_profileKey(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.profileKey, ::std::vec::Vec::new())
    }

    // uint64 timestamp = 4;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for DecryptedRequestingMember {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.uuid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.profileKey)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.uuid);
        }
        if !self.profileKey.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.profileKey);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(4, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_bytes(1, &self.uuid)?;
        }
        if !self.profileKey.is_empty() {
            os.write_bytes(2, &self.profileKey)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(4, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DecryptedRequestingMember {
        DecryptedRequestingMember::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "uuid",
                |m: &DecryptedRequestingMember| { &m.uuid },
                |m: &mut DecryptedRequestingMember| { &mut m.uuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "profileKey",
                |m: &DecryptedRequestingMember| { &m.profileKey },
                |m: &mut DecryptedRequestingMember| { &mut m.profileKey },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &DecryptedRequestingMember| { &m.timestamp },
                |m: &mut DecryptedRequestingMember| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DecryptedRequestingMember>(
                "DecryptedRequestingMember",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DecryptedRequestingMember {
        static instance: ::protobuf::rt::LazyV2<DecryptedRequestingMember> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DecryptedRequestingMember::new)
    }
}

impl ::protobuf::Clear for DecryptedRequestingMember {
    fn clear(&mut self) {
        self.uuid.clear();
        self.profileKey.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DecryptedRequestingMember {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptedRequestingMember {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DecryptedPendingMemberRemoval {
    // message fields
    pub uuid: ::std::vec::Vec<u8>,
    pub uuidCipherText: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DecryptedPendingMemberRemoval {
    fn default() -> &'a DecryptedPendingMemberRemoval {
        <DecryptedPendingMemberRemoval as ::protobuf::Message>::default_instance()
    }
}

impl DecryptedPendingMemberRemoval {
    pub fn new() -> DecryptedPendingMemberRemoval {
        ::std::default::Default::default()
    }

    // bytes uuid = 1;


    pub fn get_uuid(&self) -> &[u8] {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::vec::Vec<u8>) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.uuid, ::std::vec::Vec::new())
    }

    // bytes uuidCipherText = 2;


    pub fn get_uuidCipherText(&self) -> &[u8] {
        &self.uuidCipherText
    }
    pub fn clear_uuidCipherText(&mut self) {
        self.uuidCipherText.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuidCipherText(&mut self, v: ::std::vec::Vec<u8>) {
        self.uuidCipherText = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuidCipherText(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.uuidCipherText
    }

    // Take field
    pub fn take_uuidCipherText(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.uuidCipherText, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DecryptedPendingMemberRemoval {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.uuid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.uuidCipherText)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.uuid);
        }
        if !self.uuidCipherText.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.uuidCipherText);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_bytes(1, &self.uuid)?;
        }
        if !self.uuidCipherText.is_empty() {
            os.write_bytes(2, &self.uuidCipherText)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DecryptedPendingMemberRemoval {
        DecryptedPendingMemberRemoval::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "uuid",
                |m: &DecryptedPendingMemberRemoval| { &m.uuid },
                |m: &mut DecryptedPendingMemberRemoval| { &mut m.uuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "uuidCipherText",
                |m: &DecryptedPendingMemberRemoval| { &m.uuidCipherText },
                |m: &mut DecryptedPendingMemberRemoval| { &mut m.uuidCipherText },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DecryptedPendingMemberRemoval>(
                "DecryptedPendingMemberRemoval",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DecryptedPendingMemberRemoval {
        static instance: ::protobuf::rt::LazyV2<DecryptedPendingMemberRemoval> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DecryptedPendingMemberRemoval::new)
    }
}

impl ::protobuf::Clear for DecryptedPendingMemberRemoval {
    fn clear(&mut self) {
        self.uuid.clear();
        self.uuidCipherText.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DecryptedPendingMemberRemoval {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptedPendingMemberRemoval {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DecryptedApproveMember {
    // message fields
    pub uuid: ::std::vec::Vec<u8>,
    pub role: super::groups::Member_Role,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DecryptedApproveMember {
    fn default() -> &'a DecryptedApproveMember {
        <DecryptedApproveMember as ::protobuf::Message>::default_instance()
    }
}

impl DecryptedApproveMember {
    pub fn new() -> DecryptedApproveMember {
        ::std::default::Default::default()
    }

    // bytes uuid = 1;


    pub fn get_uuid(&self) -> &[u8] {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::vec::Vec<u8>) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.uuid, ::std::vec::Vec::new())
    }

    // .signalservice.Member.Role role = 2;


    pub fn get_role(&self) -> super::groups::Member_Role {
        self.role
    }
    pub fn clear_role(&mut self) {
        self.role = super::groups::Member_Role::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: super::groups::Member_Role) {
        self.role = v;
    }
}

impl ::protobuf::Message for DecryptedApproveMember {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.uuid)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.role, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.uuid);
        }
        if self.role != super::groups::Member_Role::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(2, self.role);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_bytes(1, &self.uuid)?;
        }
        if self.role != super::groups::Member_Role::UNKNOWN {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.role))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DecryptedApproveMember {
        DecryptedApproveMember::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "uuid",
                |m: &DecryptedApproveMember| { &m.uuid },
                |m: &mut DecryptedApproveMember| { &mut m.uuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::groups::Member_Role>>(
                "role",
                |m: &DecryptedApproveMember| { &m.role },
                |m: &mut DecryptedApproveMember| { &mut m.role },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DecryptedApproveMember>(
                "DecryptedApproveMember",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DecryptedApproveMember {
        static instance: ::protobuf::rt::LazyV2<DecryptedApproveMember> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DecryptedApproveMember::new)
    }
}

impl ::protobuf::Clear for DecryptedApproveMember {
    fn clear(&mut self) {
        self.uuid.clear();
        self.role = super::groups::Member_Role::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DecryptedApproveMember {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptedApproveMember {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DecryptedModifyMemberRole {
    // message fields
    pub uuid: ::std::vec::Vec<u8>,
    pub role: super::groups::Member_Role,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DecryptedModifyMemberRole {
    fn default() -> &'a DecryptedModifyMemberRole {
        <DecryptedModifyMemberRole as ::protobuf::Message>::default_instance()
    }
}

impl DecryptedModifyMemberRole {
    pub fn new() -> DecryptedModifyMemberRole {
        ::std::default::Default::default()
    }

    // bytes uuid = 1;


    pub fn get_uuid(&self) -> &[u8] {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::vec::Vec<u8>) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.uuid, ::std::vec::Vec::new())
    }

    // .signalservice.Member.Role role = 2;


    pub fn get_role(&self) -> super::groups::Member_Role {
        self.role
    }
    pub fn clear_role(&mut self) {
        self.role = super::groups::Member_Role::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: super::groups::Member_Role) {
        self.role = v;
    }
}

impl ::protobuf::Message for DecryptedModifyMemberRole {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.uuid)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.role, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.uuid);
        }
        if self.role != super::groups::Member_Role::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(2, self.role);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_bytes(1, &self.uuid)?;
        }
        if self.role != super::groups::Member_Role::UNKNOWN {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.role))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DecryptedModifyMemberRole {
        DecryptedModifyMemberRole::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "uuid",
                |m: &DecryptedModifyMemberRole| { &m.uuid },
                |m: &mut DecryptedModifyMemberRole| { &mut m.uuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::groups::Member_Role>>(
                "role",
                |m: &DecryptedModifyMemberRole| { &m.role },
                |m: &mut DecryptedModifyMemberRole| { &mut m.role },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DecryptedModifyMemberRole>(
                "DecryptedModifyMemberRole",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DecryptedModifyMemberRole {
        static instance: ::protobuf::rt::LazyV2<DecryptedModifyMemberRole> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DecryptedModifyMemberRole::new)
    }
}

impl ::protobuf::Clear for DecryptedModifyMemberRole {
    fn clear(&mut self) {
        self.uuid.clear();
        self.role = super::groups::Member_Role::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DecryptedModifyMemberRole {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptedModifyMemberRole {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DecryptedGroup {
    // message fields
    pub title: ::std::string::String,
    pub avatar: ::std::string::String,
    pub disappearingMessagesTimer: ::protobuf::SingularPtrField<DecryptedTimer>,
    pub accessControl: ::protobuf::SingularPtrField<super::groups::AccessControl>,
    pub revision: u32,
    pub members: ::protobuf::RepeatedField<DecryptedMember>,
    pub pendingMembers: ::protobuf::RepeatedField<DecryptedPendingMember>,
    pub requestingMembers: ::protobuf::RepeatedField<DecryptedRequestingMember>,
    pub inviteLinkPassword: ::std::vec::Vec<u8>,
    pub description: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DecryptedGroup {
    fn default() -> &'a DecryptedGroup {
        <DecryptedGroup as ::protobuf::Message>::default_instance()
    }
}

impl DecryptedGroup {
    pub fn new() -> DecryptedGroup {
        ::std::default::Default::default()
    }

    // string title = 2;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string avatar = 3;


    pub fn get_avatar(&self) -> &str {
        &self.avatar
    }
    pub fn clear_avatar(&mut self) {
        self.avatar.clear();
    }

    // Param is passed by value, moved
    pub fn set_avatar(&mut self, v: ::std::string::String) {
        self.avatar = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_avatar(&mut self) -> &mut ::std::string::String {
        &mut self.avatar
    }

    // Take field
    pub fn take_avatar(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.avatar, ::std::string::String::new())
    }

    // .signalservice.DecryptedTimer disappearingMessagesTimer = 4;


    pub fn get_disappearingMessagesTimer(&self) -> &DecryptedTimer {
        self.disappearingMessagesTimer.as_ref().unwrap_or_else(|| <DecryptedTimer as ::protobuf::Message>::default_instance())
    }
    pub fn clear_disappearingMessagesTimer(&mut self) {
        self.disappearingMessagesTimer.clear();
    }

    pub fn has_disappearingMessagesTimer(&self) -> bool {
        self.disappearingMessagesTimer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_disappearingMessagesTimer(&mut self, v: DecryptedTimer) {
        self.disappearingMessagesTimer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_disappearingMessagesTimer(&mut self) -> &mut DecryptedTimer {
        if self.disappearingMessagesTimer.is_none() {
            self.disappearingMessagesTimer.set_default();
        }
        self.disappearingMessagesTimer.as_mut().unwrap()
    }

    // Take field
    pub fn take_disappearingMessagesTimer(&mut self) -> DecryptedTimer {
        self.disappearingMessagesTimer.take().unwrap_or_else(|| DecryptedTimer::new())
    }

    // .signalservice.AccessControl accessControl = 5;


    pub fn get_accessControl(&self) -> &super::groups::AccessControl {
        self.accessControl.as_ref().unwrap_or_else(|| <super::groups::AccessControl as ::protobuf::Message>::default_instance())
    }
    pub fn clear_accessControl(&mut self) {
        self.accessControl.clear();
    }

    pub fn has_accessControl(&self) -> bool {
        self.accessControl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accessControl(&mut self, v: super::groups::AccessControl) {
        self.accessControl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accessControl(&mut self) -> &mut super::groups::AccessControl {
        if self.accessControl.is_none() {
            self.accessControl.set_default();
        }
        self.accessControl.as_mut().unwrap()
    }

    // Take field
    pub fn take_accessControl(&mut self) -> super::groups::AccessControl {
        self.accessControl.take().unwrap_or_else(|| super::groups::AccessControl::new())
    }

    // uint32 revision = 6;


    pub fn get_revision(&self) -> u32 {
        self.revision
    }
    pub fn clear_revision(&mut self) {
        self.revision = 0;
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: u32) {
        self.revision = v;
    }

    // repeated .signalservice.DecryptedMember members = 7;


    pub fn get_members(&self) -> &[DecryptedMember] {
        &self.members
    }
    pub fn clear_members(&mut self) {
        self.members.clear();
    }

    // Param is passed by value, moved
    pub fn set_members(&mut self, v: ::protobuf::RepeatedField<DecryptedMember>) {
        self.members = v;
    }

    // Mutable pointer to the field.
    pub fn mut_members(&mut self) -> &mut ::protobuf::RepeatedField<DecryptedMember> {
        &mut self.members
    }

    // Take field
    pub fn take_members(&mut self) -> ::protobuf::RepeatedField<DecryptedMember> {
        ::std::mem::replace(&mut self.members, ::protobuf::RepeatedField::new())
    }

    // repeated .signalservice.DecryptedPendingMember pendingMembers = 8;


    pub fn get_pendingMembers(&self) -> &[DecryptedPendingMember] {
        &self.pendingMembers
    }
    pub fn clear_pendingMembers(&mut self) {
        self.pendingMembers.clear();
    }

    // Param is passed by value, moved
    pub fn set_pendingMembers(&mut self, v: ::protobuf::RepeatedField<DecryptedPendingMember>) {
        self.pendingMembers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pendingMembers(&mut self) -> &mut ::protobuf::RepeatedField<DecryptedPendingMember> {
        &mut self.pendingMembers
    }

    // Take field
    pub fn take_pendingMembers(&mut self) -> ::protobuf::RepeatedField<DecryptedPendingMember> {
        ::std::mem::replace(&mut self.pendingMembers, ::protobuf::RepeatedField::new())
    }

    // repeated .signalservice.DecryptedRequestingMember requestingMembers = 9;


    pub fn get_requestingMembers(&self) -> &[DecryptedRequestingMember] {
        &self.requestingMembers
    }
    pub fn clear_requestingMembers(&mut self) {
        self.requestingMembers.clear();
    }

    // Param is passed by value, moved
    pub fn set_requestingMembers(&mut self, v: ::protobuf::RepeatedField<DecryptedRequestingMember>) {
        self.requestingMembers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_requestingMembers(&mut self) -> &mut ::protobuf::RepeatedField<DecryptedRequestingMember> {
        &mut self.requestingMembers
    }

    // Take field
    pub fn take_requestingMembers(&mut self) -> ::protobuf::RepeatedField<DecryptedRequestingMember> {
        ::std::mem::replace(&mut self.requestingMembers, ::protobuf::RepeatedField::new())
    }

    // bytes inviteLinkPassword = 10;


    pub fn get_inviteLinkPassword(&self) -> &[u8] {
        &self.inviteLinkPassword
    }
    pub fn clear_inviteLinkPassword(&mut self) {
        self.inviteLinkPassword.clear();
    }

    // Param is passed by value, moved
    pub fn set_inviteLinkPassword(&mut self, v: ::std::vec::Vec<u8>) {
        self.inviteLinkPassword = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inviteLinkPassword(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.inviteLinkPassword
    }

    // Take field
    pub fn take_inviteLinkPassword(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.inviteLinkPassword, ::std::vec::Vec::new())
    }

    // string description = 11;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DecryptedGroup {
    fn is_initialized(&self) -> bool {
        for v in &self.disappearingMessagesTimer {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.accessControl {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.members {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pendingMembers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.requestingMembers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.avatar)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.disappearingMessagesTimer)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accessControl)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.revision = tmp;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.members)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.pendingMembers)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.requestingMembers)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.inviteLinkPassword)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.avatar.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.avatar);
        }
        if let Some(ref v) = self.disappearingMessagesTimer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.accessControl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.revision != 0 {
            my_size += ::protobuf::rt::value_size(6, self.revision, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.pendingMembers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.requestingMembers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.inviteLinkPassword.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.inviteLinkPassword);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.avatar.is_empty() {
            os.write_string(3, &self.avatar)?;
        }
        if let Some(ref v) = self.disappearingMessagesTimer.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.accessControl.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.revision != 0 {
            os.write_uint32(6, self.revision)?;
        }
        for v in &self.members {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.pendingMembers {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.requestingMembers {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.inviteLinkPassword.is_empty() {
            os.write_bytes(10, &self.inviteLinkPassword)?;
        }
        if !self.description.is_empty() {
            os.write_string(11, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DecryptedGroup {
        DecryptedGroup::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &DecryptedGroup| { &m.title },
                |m: &mut DecryptedGroup| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "avatar",
                |m: &DecryptedGroup| { &m.avatar },
                |m: &mut DecryptedGroup| { &mut m.avatar },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedTimer>>(
                "disappearingMessagesTimer",
                |m: &DecryptedGroup| { &m.disappearingMessagesTimer },
                |m: &mut DecryptedGroup| { &mut m.disappearingMessagesTimer },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::groups::AccessControl>>(
                "accessControl",
                |m: &DecryptedGroup| { &m.accessControl },
                |m: &mut DecryptedGroup| { &mut m.accessControl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "revision",
                |m: &DecryptedGroup| { &m.revision },
                |m: &mut DecryptedGroup| { &mut m.revision },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedMember>>(
                "members",
                |m: &DecryptedGroup| { &m.members },
                |m: &mut DecryptedGroup| { &mut m.members },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedPendingMember>>(
                "pendingMembers",
                |m: &DecryptedGroup| { &m.pendingMembers },
                |m: &mut DecryptedGroup| { &mut m.pendingMembers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedRequestingMember>>(
                "requestingMembers",
                |m: &DecryptedGroup| { &m.requestingMembers },
                |m: &mut DecryptedGroup| { &mut m.requestingMembers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "inviteLinkPassword",
                |m: &DecryptedGroup| { &m.inviteLinkPassword },
                |m: &mut DecryptedGroup| { &mut m.inviteLinkPassword },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &DecryptedGroup| { &m.description },
                |m: &mut DecryptedGroup| { &mut m.description },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DecryptedGroup>(
                "DecryptedGroup",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DecryptedGroup {
        static instance: ::protobuf::rt::LazyV2<DecryptedGroup> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DecryptedGroup::new)
    }
}

impl ::protobuf::Clear for DecryptedGroup {
    fn clear(&mut self) {
        self.title.clear();
        self.avatar.clear();
        self.disappearingMessagesTimer.clear();
        self.accessControl.clear();
        self.revision = 0;
        self.members.clear();
        self.pendingMembers.clear();
        self.requestingMembers.clear();
        self.inviteLinkPassword.clear();
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DecryptedGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptedGroup {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DecryptedGroupChange {
    // message fields
    pub editor: ::std::vec::Vec<u8>,
    pub revision: u32,
    pub newMembers: ::protobuf::RepeatedField<DecryptedMember>,
    pub deleteMembers: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub modifyMemberRoles: ::protobuf::RepeatedField<DecryptedModifyMemberRole>,
    pub modifiedProfileKeys: ::protobuf::RepeatedField<DecryptedMember>,
    pub newPendingMembers: ::protobuf::RepeatedField<DecryptedPendingMember>,
    pub deletePendingMembers: ::protobuf::RepeatedField<DecryptedPendingMemberRemoval>,
    pub promotePendingMembers: ::protobuf::RepeatedField<DecryptedMember>,
    pub newTitle: ::protobuf::SingularPtrField<DecryptedString>,
    pub newAvatar: ::protobuf::SingularPtrField<DecryptedString>,
    pub newTimer: ::protobuf::SingularPtrField<DecryptedTimer>,
    pub newAttributeAccess: super::groups::AccessControl_AccessRequired,
    pub newMemberAccess: super::groups::AccessControl_AccessRequired,
    pub newInviteLinkAccess: super::groups::AccessControl_AccessRequired,
    pub newRequestingMembers: ::protobuf::RepeatedField<DecryptedRequestingMember>,
    pub deleteRequestingMembers: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub promoteRequestingMembers: ::protobuf::RepeatedField<DecryptedApproveMember>,
    pub newInviteLinkPassword: ::std::vec::Vec<u8>,
    pub newDescription: ::protobuf::SingularPtrField<DecryptedString>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DecryptedGroupChange {
    fn default() -> &'a DecryptedGroupChange {
        <DecryptedGroupChange as ::protobuf::Message>::default_instance()
    }
}

impl DecryptedGroupChange {
    pub fn new() -> DecryptedGroupChange {
        ::std::default::Default::default()
    }

    // bytes editor = 1;


    pub fn get_editor(&self) -> &[u8] {
        &self.editor
    }
    pub fn clear_editor(&mut self) {
        self.editor.clear();
    }

    // Param is passed by value, moved
    pub fn set_editor(&mut self, v: ::std::vec::Vec<u8>) {
        self.editor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_editor(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.editor
    }

    // Take field
    pub fn take_editor(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.editor, ::std::vec::Vec::new())
    }

    // uint32 revision = 2;


    pub fn get_revision(&self) -> u32 {
        self.revision
    }
    pub fn clear_revision(&mut self) {
        self.revision = 0;
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: u32) {
        self.revision = v;
    }

    // repeated .signalservice.DecryptedMember newMembers = 3;


    pub fn get_newMembers(&self) -> &[DecryptedMember] {
        &self.newMembers
    }
    pub fn clear_newMembers(&mut self) {
        self.newMembers.clear();
    }

    // Param is passed by value, moved
    pub fn set_newMembers(&mut self, v: ::protobuf::RepeatedField<DecryptedMember>) {
        self.newMembers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_newMembers(&mut self) -> &mut ::protobuf::RepeatedField<DecryptedMember> {
        &mut self.newMembers
    }

    // Take field
    pub fn take_newMembers(&mut self) -> ::protobuf::RepeatedField<DecryptedMember> {
        ::std::mem::replace(&mut self.newMembers, ::protobuf::RepeatedField::new())
    }

    // repeated bytes deleteMembers = 4;


    pub fn get_deleteMembers(&self) -> &[::std::vec::Vec<u8>] {
        &self.deleteMembers
    }
    pub fn clear_deleteMembers(&mut self) {
        self.deleteMembers.clear();
    }

    // Param is passed by value, moved
    pub fn set_deleteMembers(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.deleteMembers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_deleteMembers(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.deleteMembers
    }

    // Take field
    pub fn take_deleteMembers(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.deleteMembers, ::protobuf::RepeatedField::new())
    }

    // repeated .signalservice.DecryptedModifyMemberRole modifyMemberRoles = 5;


    pub fn get_modifyMemberRoles(&self) -> &[DecryptedModifyMemberRole] {
        &self.modifyMemberRoles
    }
    pub fn clear_modifyMemberRoles(&mut self) {
        self.modifyMemberRoles.clear();
    }

    // Param is passed by value, moved
    pub fn set_modifyMemberRoles(&mut self, v: ::protobuf::RepeatedField<DecryptedModifyMemberRole>) {
        self.modifyMemberRoles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_modifyMemberRoles(&mut self) -> &mut ::protobuf::RepeatedField<DecryptedModifyMemberRole> {
        &mut self.modifyMemberRoles
    }

    // Take field
    pub fn take_modifyMemberRoles(&mut self) -> ::protobuf::RepeatedField<DecryptedModifyMemberRole> {
        ::std::mem::replace(&mut self.modifyMemberRoles, ::protobuf::RepeatedField::new())
    }

    // repeated .signalservice.DecryptedMember modifiedProfileKeys = 6;


    pub fn get_modifiedProfileKeys(&self) -> &[DecryptedMember] {
        &self.modifiedProfileKeys
    }
    pub fn clear_modifiedProfileKeys(&mut self) {
        self.modifiedProfileKeys.clear();
    }

    // Param is passed by value, moved
    pub fn set_modifiedProfileKeys(&mut self, v: ::protobuf::RepeatedField<DecryptedMember>) {
        self.modifiedProfileKeys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_modifiedProfileKeys(&mut self) -> &mut ::protobuf::RepeatedField<DecryptedMember> {
        &mut self.modifiedProfileKeys
    }

    // Take field
    pub fn take_modifiedProfileKeys(&mut self) -> ::protobuf::RepeatedField<DecryptedMember> {
        ::std::mem::replace(&mut self.modifiedProfileKeys, ::protobuf::RepeatedField::new())
    }

    // repeated .signalservice.DecryptedPendingMember newPendingMembers = 7;


    pub fn get_newPendingMembers(&self) -> &[DecryptedPendingMember] {
        &self.newPendingMembers
    }
    pub fn clear_newPendingMembers(&mut self) {
        self.newPendingMembers.clear();
    }

    // Param is passed by value, moved
    pub fn set_newPendingMembers(&mut self, v: ::protobuf::RepeatedField<DecryptedPendingMember>) {
        self.newPendingMembers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_newPendingMembers(&mut self) -> &mut ::protobuf::RepeatedField<DecryptedPendingMember> {
        &mut self.newPendingMembers
    }

    // Take field
    pub fn take_newPendingMembers(&mut self) -> ::protobuf::RepeatedField<DecryptedPendingMember> {
        ::std::mem::replace(&mut self.newPendingMembers, ::protobuf::RepeatedField::new())
    }

    // repeated .signalservice.DecryptedPendingMemberRemoval deletePendingMembers = 8;


    pub fn get_deletePendingMembers(&self) -> &[DecryptedPendingMemberRemoval] {
        &self.deletePendingMembers
    }
    pub fn clear_deletePendingMembers(&mut self) {
        self.deletePendingMembers.clear();
    }

    // Param is passed by value, moved
    pub fn set_deletePendingMembers(&mut self, v: ::protobuf::RepeatedField<DecryptedPendingMemberRemoval>) {
        self.deletePendingMembers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_deletePendingMembers(&mut self) -> &mut ::protobuf::RepeatedField<DecryptedPendingMemberRemoval> {
        &mut self.deletePendingMembers
    }

    // Take field
    pub fn take_deletePendingMembers(&mut self) -> ::protobuf::RepeatedField<DecryptedPendingMemberRemoval> {
        ::std::mem::replace(&mut self.deletePendingMembers, ::protobuf::RepeatedField::new())
    }

    // repeated .signalservice.DecryptedMember promotePendingMembers = 9;


    pub fn get_promotePendingMembers(&self) -> &[DecryptedMember] {
        &self.promotePendingMembers
    }
    pub fn clear_promotePendingMembers(&mut self) {
        self.promotePendingMembers.clear();
    }

    // Param is passed by value, moved
    pub fn set_promotePendingMembers(&mut self, v: ::protobuf::RepeatedField<DecryptedMember>) {
        self.promotePendingMembers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_promotePendingMembers(&mut self) -> &mut ::protobuf::RepeatedField<DecryptedMember> {
        &mut self.promotePendingMembers
    }

    // Take field
    pub fn take_promotePendingMembers(&mut self) -> ::protobuf::RepeatedField<DecryptedMember> {
        ::std::mem::replace(&mut self.promotePendingMembers, ::protobuf::RepeatedField::new())
    }

    // .signalservice.DecryptedString newTitle = 10;


    pub fn get_newTitle(&self) -> &DecryptedString {
        self.newTitle.as_ref().unwrap_or_else(|| <DecryptedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_newTitle(&mut self) {
        self.newTitle.clear();
    }

    pub fn has_newTitle(&self) -> bool {
        self.newTitle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_newTitle(&mut self, v: DecryptedString) {
        self.newTitle = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_newTitle(&mut self) -> &mut DecryptedString {
        if self.newTitle.is_none() {
            self.newTitle.set_default();
        }
        self.newTitle.as_mut().unwrap()
    }

    // Take field
    pub fn take_newTitle(&mut self) -> DecryptedString {
        self.newTitle.take().unwrap_or_else(|| DecryptedString::new())
    }

    // .signalservice.DecryptedString newAvatar = 11;


    pub fn get_newAvatar(&self) -> &DecryptedString {
        self.newAvatar.as_ref().unwrap_or_else(|| <DecryptedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_newAvatar(&mut self) {
        self.newAvatar.clear();
    }

    pub fn has_newAvatar(&self) -> bool {
        self.newAvatar.is_some()
    }

    // Param is passed by value, moved
    pub fn set_newAvatar(&mut self, v: DecryptedString) {
        self.newAvatar = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_newAvatar(&mut self) -> &mut DecryptedString {
        if self.newAvatar.is_none() {
            self.newAvatar.set_default();
        }
        self.newAvatar.as_mut().unwrap()
    }

    // Take field
    pub fn take_newAvatar(&mut self) -> DecryptedString {
        self.newAvatar.take().unwrap_or_else(|| DecryptedString::new())
    }

    // .signalservice.DecryptedTimer newTimer = 12;


    pub fn get_newTimer(&self) -> &DecryptedTimer {
        self.newTimer.as_ref().unwrap_or_else(|| <DecryptedTimer as ::protobuf::Message>::default_instance())
    }
    pub fn clear_newTimer(&mut self) {
        self.newTimer.clear();
    }

    pub fn has_newTimer(&self) -> bool {
        self.newTimer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_newTimer(&mut self, v: DecryptedTimer) {
        self.newTimer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_newTimer(&mut self) -> &mut DecryptedTimer {
        if self.newTimer.is_none() {
            self.newTimer.set_default();
        }
        self.newTimer.as_mut().unwrap()
    }

    // Take field
    pub fn take_newTimer(&mut self) -> DecryptedTimer {
        self.newTimer.take().unwrap_or_else(|| DecryptedTimer::new())
    }

    // .signalservice.AccessControl.AccessRequired newAttributeAccess = 13;


    pub fn get_newAttributeAccess(&self) -> super::groups::AccessControl_AccessRequired {
        self.newAttributeAccess
    }
    pub fn clear_newAttributeAccess(&mut self) {
        self.newAttributeAccess = super::groups::AccessControl_AccessRequired::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_newAttributeAccess(&mut self, v: super::groups::AccessControl_AccessRequired) {
        self.newAttributeAccess = v;
    }

    // .signalservice.AccessControl.AccessRequired newMemberAccess = 14;


    pub fn get_newMemberAccess(&self) -> super::groups::AccessControl_AccessRequired {
        self.newMemberAccess
    }
    pub fn clear_newMemberAccess(&mut self) {
        self.newMemberAccess = super::groups::AccessControl_AccessRequired::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_newMemberAccess(&mut self, v: super::groups::AccessControl_AccessRequired) {
        self.newMemberAccess = v;
    }

    // .signalservice.AccessControl.AccessRequired newInviteLinkAccess = 15;


    pub fn get_newInviteLinkAccess(&self) -> super::groups::AccessControl_AccessRequired {
        self.newInviteLinkAccess
    }
    pub fn clear_newInviteLinkAccess(&mut self) {
        self.newInviteLinkAccess = super::groups::AccessControl_AccessRequired::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_newInviteLinkAccess(&mut self, v: super::groups::AccessControl_AccessRequired) {
        self.newInviteLinkAccess = v;
    }

    // repeated .signalservice.DecryptedRequestingMember newRequestingMembers = 16;


    pub fn get_newRequestingMembers(&self) -> &[DecryptedRequestingMember] {
        &self.newRequestingMembers
    }
    pub fn clear_newRequestingMembers(&mut self) {
        self.newRequestingMembers.clear();
    }

    // Param is passed by value, moved
    pub fn set_newRequestingMembers(&mut self, v: ::protobuf::RepeatedField<DecryptedRequestingMember>) {
        self.newRequestingMembers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_newRequestingMembers(&mut self) -> &mut ::protobuf::RepeatedField<DecryptedRequestingMember> {
        &mut self.newRequestingMembers
    }

    // Take field
    pub fn take_newRequestingMembers(&mut self) -> ::protobuf::RepeatedField<DecryptedRequestingMember> {
        ::std::mem::replace(&mut self.newRequestingMembers, ::protobuf::RepeatedField::new())
    }

    // repeated bytes deleteRequestingMembers = 17;


    pub fn get_deleteRequestingMembers(&self) -> &[::std::vec::Vec<u8>] {
        &self.deleteRequestingMembers
    }
    pub fn clear_deleteRequestingMembers(&mut self) {
        self.deleteRequestingMembers.clear();
    }

    // Param is passed by value, moved
    pub fn set_deleteRequestingMembers(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.deleteRequestingMembers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_deleteRequestingMembers(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.deleteRequestingMembers
    }

    // Take field
    pub fn take_deleteRequestingMembers(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.deleteRequestingMembers, ::protobuf::RepeatedField::new())
    }

    // repeated .signalservice.DecryptedApproveMember promoteRequestingMembers = 18;


    pub fn get_promoteRequestingMembers(&self) -> &[DecryptedApproveMember] {
        &self.promoteRequestingMembers
    }
    pub fn clear_promoteRequestingMembers(&mut self) {
        self.promoteRequestingMembers.clear();
    }

    // Param is passed by value, moved
    pub fn set_promoteRequestingMembers(&mut self, v: ::protobuf::RepeatedField<DecryptedApproveMember>) {
        self.promoteRequestingMembers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_promoteRequestingMembers(&mut self) -> &mut ::protobuf::RepeatedField<DecryptedApproveMember> {
        &mut self.promoteRequestingMembers
    }

    // Take field
    pub fn take_promoteRequestingMembers(&mut self) -> ::protobuf::RepeatedField<DecryptedApproveMember> {
        ::std::mem::replace(&mut self.promoteRequestingMembers, ::protobuf::RepeatedField::new())
    }

    // bytes newInviteLinkPassword = 19;


    pub fn get_newInviteLinkPassword(&self) -> &[u8] {
        &self.newInviteLinkPassword
    }
    pub fn clear_newInviteLinkPassword(&mut self) {
        self.newInviteLinkPassword.clear();
    }

    // Param is passed by value, moved
    pub fn set_newInviteLinkPassword(&mut self, v: ::std::vec::Vec<u8>) {
        self.newInviteLinkPassword = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_newInviteLinkPassword(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.newInviteLinkPassword
    }

    // Take field
    pub fn take_newInviteLinkPassword(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.newInviteLinkPassword, ::std::vec::Vec::new())
    }

    // .signalservice.DecryptedString newDescription = 20;


    pub fn get_newDescription(&self) -> &DecryptedString {
        self.newDescription.as_ref().unwrap_or_else(|| <DecryptedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_newDescription(&mut self) {
        self.newDescription.clear();
    }

    pub fn has_newDescription(&self) -> bool {
        self.newDescription.is_some()
    }

    // Param is passed by value, moved
    pub fn set_newDescription(&mut self, v: DecryptedString) {
        self.newDescription = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_newDescription(&mut self) -> &mut DecryptedString {
        if self.newDescription.is_none() {
            self.newDescription.set_default();
        }
        self.newDescription.as_mut().unwrap()
    }

    // Take field
    pub fn take_newDescription(&mut self) -> DecryptedString {
        self.newDescription.take().unwrap_or_else(|| DecryptedString::new())
    }
}

impl ::protobuf::Message for DecryptedGroupChange {
    fn is_initialized(&self) -> bool {
        for v in &self.newMembers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.modifyMemberRoles {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.modifiedProfileKeys {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.newPendingMembers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.deletePendingMembers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.promotePendingMembers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.newTitle {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.newAvatar {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.newTimer {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.newRequestingMembers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.promoteRequestingMembers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.newDescription {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.editor)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.revision = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.newMembers)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.deleteMembers)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.modifyMemberRoles)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.modifiedProfileKeys)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.newPendingMembers)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.deletePendingMembers)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.promotePendingMembers)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.newTitle)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.newAvatar)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.newTimer)?;
                },
                13 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.newAttributeAccess, 13, &mut self.unknown_fields)?
                },
                14 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.newMemberAccess, 14, &mut self.unknown_fields)?
                },
                15 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.newInviteLinkAccess, 15, &mut self.unknown_fields)?
                },
                16 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.newRequestingMembers)?;
                },
                17 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.deleteRequestingMembers)?;
                },
                18 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.promoteRequestingMembers)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.newInviteLinkPassword)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.newDescription)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.editor.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.editor);
        }
        if self.revision != 0 {
            my_size += ::protobuf::rt::value_size(2, self.revision, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.newMembers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.deleteMembers {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        for value in &self.modifyMemberRoles {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.modifiedProfileKeys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.newPendingMembers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.deletePendingMembers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.promotePendingMembers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.newTitle.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.newAvatar.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.newTimer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.newAttributeAccess != super::groups::AccessControl_AccessRequired::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(13, self.newAttributeAccess);
        }
        if self.newMemberAccess != super::groups::AccessControl_AccessRequired::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(14, self.newMemberAccess);
        }
        if self.newInviteLinkAccess != super::groups::AccessControl_AccessRequired::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(15, self.newInviteLinkAccess);
        }
        for value in &self.newRequestingMembers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.deleteRequestingMembers {
            my_size += ::protobuf::rt::bytes_size(17, &value);
        };
        for value in &self.promoteRequestingMembers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.newInviteLinkPassword.is_empty() {
            my_size += ::protobuf::rt::bytes_size(19, &self.newInviteLinkPassword);
        }
        if let Some(ref v) = self.newDescription.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.editor.is_empty() {
            os.write_bytes(1, &self.editor)?;
        }
        if self.revision != 0 {
            os.write_uint32(2, self.revision)?;
        }
        for v in &self.newMembers {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.deleteMembers {
            os.write_bytes(4, &v)?;
        };
        for v in &self.modifyMemberRoles {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.modifiedProfileKeys {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.newPendingMembers {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.deletePendingMembers {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.promotePendingMembers {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.newTitle.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.newAvatar.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.newTimer.as_ref() {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.newAttributeAccess != super::groups::AccessControl_AccessRequired::UNKNOWN {
            os.write_enum(13, ::protobuf::ProtobufEnum::value(&self.newAttributeAccess))?;
        }
        if self.newMemberAccess != super::groups::AccessControl_AccessRequired::UNKNOWN {
            os.write_enum(14, ::protobuf::ProtobufEnum::value(&self.newMemberAccess))?;
        }
        if self.newInviteLinkAccess != super::groups::AccessControl_AccessRequired::UNKNOWN {
            os.write_enum(15, ::protobuf::ProtobufEnum::value(&self.newInviteLinkAccess))?;
        }
        for v in &self.newRequestingMembers {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.deleteRequestingMembers {
            os.write_bytes(17, &v)?;
        };
        for v in &self.promoteRequestingMembers {
            os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.newInviteLinkPassword.is_empty() {
            os.write_bytes(19, &self.newInviteLinkPassword)?;
        }
        if let Some(ref v) = self.newDescription.as_ref() {
            os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DecryptedGroupChange {
        DecryptedGroupChange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "editor",
                |m: &DecryptedGroupChange| { &m.editor },
                |m: &mut DecryptedGroupChange| { &mut m.editor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "revision",
                |m: &DecryptedGroupChange| { &m.revision },
                |m: &mut DecryptedGroupChange| { &mut m.revision },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedMember>>(
                "newMembers",
                |m: &DecryptedGroupChange| { &m.newMembers },
                |m: &mut DecryptedGroupChange| { &mut m.newMembers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "deleteMembers",
                |m: &DecryptedGroupChange| { &m.deleteMembers },
                |m: &mut DecryptedGroupChange| { &mut m.deleteMembers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedModifyMemberRole>>(
                "modifyMemberRoles",
                |m: &DecryptedGroupChange| { &m.modifyMemberRoles },
                |m: &mut DecryptedGroupChange| { &mut m.modifyMemberRoles },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedMember>>(
                "modifiedProfileKeys",
                |m: &DecryptedGroupChange| { &m.modifiedProfileKeys },
                |m: &mut DecryptedGroupChange| { &mut m.modifiedProfileKeys },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedPendingMember>>(
                "newPendingMembers",
                |m: &DecryptedGroupChange| { &m.newPendingMembers },
                |m: &mut DecryptedGroupChange| { &mut m.newPendingMembers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedPendingMemberRemoval>>(
                "deletePendingMembers",
                |m: &DecryptedGroupChange| { &m.deletePendingMembers },
                |m: &mut DecryptedGroupChange| { &mut m.deletePendingMembers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedMember>>(
                "promotePendingMembers",
                |m: &DecryptedGroupChange| { &m.promotePendingMembers },
                |m: &mut DecryptedGroupChange| { &mut m.promotePendingMembers },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedString>>(
                "newTitle",
                |m: &DecryptedGroupChange| { &m.newTitle },
                |m: &mut DecryptedGroupChange| { &mut m.newTitle },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedString>>(
                "newAvatar",
                |m: &DecryptedGroupChange| { &m.newAvatar },
                |m: &mut DecryptedGroupChange| { &mut m.newAvatar },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedTimer>>(
                "newTimer",
                |m: &DecryptedGroupChange| { &m.newTimer },
                |m: &mut DecryptedGroupChange| { &mut m.newTimer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::groups::AccessControl_AccessRequired>>(
                "newAttributeAccess",
                |m: &DecryptedGroupChange| { &m.newAttributeAccess },
                |m: &mut DecryptedGroupChange| { &mut m.newAttributeAccess },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::groups::AccessControl_AccessRequired>>(
                "newMemberAccess",
                |m: &DecryptedGroupChange| { &m.newMemberAccess },
                |m: &mut DecryptedGroupChange| { &mut m.newMemberAccess },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::groups::AccessControl_AccessRequired>>(
                "newInviteLinkAccess",
                |m: &DecryptedGroupChange| { &m.newInviteLinkAccess },
                |m: &mut DecryptedGroupChange| { &mut m.newInviteLinkAccess },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedRequestingMember>>(
                "newRequestingMembers",
                |m: &DecryptedGroupChange| { &m.newRequestingMembers },
                |m: &mut DecryptedGroupChange| { &mut m.newRequestingMembers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "deleteRequestingMembers",
                |m: &DecryptedGroupChange| { &m.deleteRequestingMembers },
                |m: &mut DecryptedGroupChange| { &mut m.deleteRequestingMembers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedApproveMember>>(
                "promoteRequestingMembers",
                |m: &DecryptedGroupChange| { &m.promoteRequestingMembers },
                |m: &mut DecryptedGroupChange| { &mut m.promoteRequestingMembers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "newInviteLinkPassword",
                |m: &DecryptedGroupChange| { &m.newInviteLinkPassword },
                |m: &mut DecryptedGroupChange| { &mut m.newInviteLinkPassword },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DecryptedString>>(
                "newDescription",
                |m: &DecryptedGroupChange| { &m.newDescription },
                |m: &mut DecryptedGroupChange| { &mut m.newDescription },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DecryptedGroupChange>(
                "DecryptedGroupChange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DecryptedGroupChange {
        static instance: ::protobuf::rt::LazyV2<DecryptedGroupChange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DecryptedGroupChange::new)
    }
}

impl ::protobuf::Clear for DecryptedGroupChange {
    fn clear(&mut self) {
        self.editor.clear();
        self.revision = 0;
        self.newMembers.clear();
        self.deleteMembers.clear();
        self.modifyMemberRoles.clear();
        self.modifiedProfileKeys.clear();
        self.newPendingMembers.clear();
        self.deletePendingMembers.clear();
        self.promotePendingMembers.clear();
        self.newTitle.clear();
        self.newAvatar.clear();
        self.newTimer.clear();
        self.newAttributeAccess = super::groups::AccessControl_AccessRequired::UNKNOWN;
        self.newMemberAccess = super::groups::AccessControl_AccessRequired::UNKNOWN;
        self.newInviteLinkAccess = super::groups::AccessControl_AccessRequired::UNKNOWN;
        self.newRequestingMembers.clear();
        self.deleteRequestingMembers.clear();
        self.promoteRequestingMembers.clear();
        self.newInviteLinkPassword.clear();
        self.newDescription.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DecryptedGroupChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptedGroupChange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DecryptedString {
    // message fields
    pub value: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DecryptedString {
    fn default() -> &'a DecryptedString {
        <DecryptedString as ::protobuf::Message>::default_instance()
    }
}

impl DecryptedString {
    pub fn new() -> DecryptedString {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DecryptedString {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DecryptedString {
        DecryptedString::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &DecryptedString| { &m.value },
                |m: &mut DecryptedString| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DecryptedString>(
                "DecryptedString",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DecryptedString {
        static instance: ::protobuf::rt::LazyV2<DecryptedString> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DecryptedString::new)
    }
}

impl ::protobuf::Clear for DecryptedString {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DecryptedString {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptedString {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DecryptedTimer {
    // message fields
    pub duration: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DecryptedTimer {
    fn default() -> &'a DecryptedTimer {
        <DecryptedTimer as ::protobuf::Message>::default_instance()
    }
}

impl DecryptedTimer {
    pub fn new() -> DecryptedTimer {
        ::std::default::Default::default()
    }

    // uint32 duration = 1;


    pub fn get_duration(&self) -> u32 {
        self.duration
    }
    pub fn clear_duration(&mut self) {
        self.duration = 0;
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: u32) {
        self.duration = v;
    }
}

impl ::protobuf::Message for DecryptedTimer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.duration = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.duration != 0 {
            my_size += ::protobuf::rt::value_size(1, self.duration, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.duration != 0 {
            os.write_uint32(1, self.duration)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DecryptedTimer {
        DecryptedTimer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "duration",
                |m: &DecryptedTimer| { &m.duration },
                |m: &mut DecryptedTimer| { &mut m.duration },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DecryptedTimer>(
                "DecryptedTimer",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DecryptedTimer {
        static instance: ::protobuf::rt::LazyV2<DecryptedTimer> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DecryptedTimer::new)
    }
}

impl ::protobuf::Clear for DecryptedTimer {
    fn clear(&mut self) {
        self.duration = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DecryptedTimer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptedTimer {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DecryptedGroupJoinInfo {
    // message fields
    pub title: ::std::string::String,
    pub avatar: ::std::string::String,
    pub memberCount: u32,
    pub addFromInviteLink: super::groups::AccessControl_AccessRequired,
    pub revision: u32,
    pub pendingAdminApproval: bool,
    pub description: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DecryptedGroupJoinInfo {
    fn default() -> &'a DecryptedGroupJoinInfo {
        <DecryptedGroupJoinInfo as ::protobuf::Message>::default_instance()
    }
}

impl DecryptedGroupJoinInfo {
    pub fn new() -> DecryptedGroupJoinInfo {
        ::std::default::Default::default()
    }

    // string title = 2;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string avatar = 3;


    pub fn get_avatar(&self) -> &str {
        &self.avatar
    }
    pub fn clear_avatar(&mut self) {
        self.avatar.clear();
    }

    // Param is passed by value, moved
    pub fn set_avatar(&mut self, v: ::std::string::String) {
        self.avatar = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_avatar(&mut self) -> &mut ::std::string::String {
        &mut self.avatar
    }

    // Take field
    pub fn take_avatar(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.avatar, ::std::string::String::new())
    }

    // uint32 memberCount = 4;


    pub fn get_memberCount(&self) -> u32 {
        self.memberCount
    }
    pub fn clear_memberCount(&mut self) {
        self.memberCount = 0;
    }

    // Param is passed by value, moved
    pub fn set_memberCount(&mut self, v: u32) {
        self.memberCount = v;
    }

    // .signalservice.AccessControl.AccessRequired addFromInviteLink = 5;


    pub fn get_addFromInviteLink(&self) -> super::groups::AccessControl_AccessRequired {
        self.addFromInviteLink
    }
    pub fn clear_addFromInviteLink(&mut self) {
        self.addFromInviteLink = super::groups::AccessControl_AccessRequired::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_addFromInviteLink(&mut self, v: super::groups::AccessControl_AccessRequired) {
        self.addFromInviteLink = v;
    }

    // uint32 revision = 6;


    pub fn get_revision(&self) -> u32 {
        self.revision
    }
    pub fn clear_revision(&mut self) {
        self.revision = 0;
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: u32) {
        self.revision = v;
    }

    // bool pendingAdminApproval = 7;


    pub fn get_pendingAdminApproval(&self) -> bool {
        self.pendingAdminApproval
    }
    pub fn clear_pendingAdminApproval(&mut self) {
        self.pendingAdminApproval = false;
    }

    // Param is passed by value, moved
    pub fn set_pendingAdminApproval(&mut self, v: bool) {
        self.pendingAdminApproval = v;
    }

    // string description = 8;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DecryptedGroupJoinInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.avatar)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.memberCount = tmp;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.addFromInviteLink, 5, &mut self.unknown_fields)?
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.revision = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.pendingAdminApproval = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.avatar.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.avatar);
        }
        if self.memberCount != 0 {
            my_size += ::protobuf::rt::value_size(4, self.memberCount, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.addFromInviteLink != super::groups::AccessControl_AccessRequired::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(5, self.addFromInviteLink);
        }
        if self.revision != 0 {
            my_size += ::protobuf::rt::value_size(6, self.revision, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pendingAdminApproval != false {
            my_size += 2;
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.avatar.is_empty() {
            os.write_string(3, &self.avatar)?;
        }
        if self.memberCount != 0 {
            os.write_uint32(4, self.memberCount)?;
        }
        if self.addFromInviteLink != super::groups::AccessControl_AccessRequired::UNKNOWN {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.addFromInviteLink))?;
        }
        if self.revision != 0 {
            os.write_uint32(6, self.revision)?;
        }
        if self.pendingAdminApproval != false {
            os.write_bool(7, self.pendingAdminApproval)?;
        }
        if !self.description.is_empty() {
            os.write_string(8, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DecryptedGroupJoinInfo {
        DecryptedGroupJoinInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &DecryptedGroupJoinInfo| { &m.title },
                |m: &mut DecryptedGroupJoinInfo| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "avatar",
                |m: &DecryptedGroupJoinInfo| { &m.avatar },
                |m: &mut DecryptedGroupJoinInfo| { &mut m.avatar },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "memberCount",
                |m: &DecryptedGroupJoinInfo| { &m.memberCount },
                |m: &mut DecryptedGroupJoinInfo| { &mut m.memberCount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::groups::AccessControl_AccessRequired>>(
                "addFromInviteLink",
                |m: &DecryptedGroupJoinInfo| { &m.addFromInviteLink },
                |m: &mut DecryptedGroupJoinInfo| { &mut m.addFromInviteLink },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "revision",
                |m: &DecryptedGroupJoinInfo| { &m.revision },
                |m: &mut DecryptedGroupJoinInfo| { &mut m.revision },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "pendingAdminApproval",
                |m: &DecryptedGroupJoinInfo| { &m.pendingAdminApproval },
                |m: &mut DecryptedGroupJoinInfo| { &mut m.pendingAdminApproval },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &DecryptedGroupJoinInfo| { &m.description },
                |m: &mut DecryptedGroupJoinInfo| { &mut m.description },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DecryptedGroupJoinInfo>(
                "DecryptedGroupJoinInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DecryptedGroupJoinInfo {
        static instance: ::protobuf::rt::LazyV2<DecryptedGroupJoinInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DecryptedGroupJoinInfo::new)
    }
}

impl ::protobuf::Clear for DecryptedGroupJoinInfo {
    fn clear(&mut self) {
        self.title.clear();
        self.avatar.clear();
        self.memberCount = 0;
        self.addFromInviteLink = super::groups::AccessControl_AccessRequired::UNKNOWN;
        self.revision = 0;
        self.pendingAdminApproval = false;
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DecryptedGroupJoinInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptedGroupJoinInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16decrypted_groups.proto\x12\rsignalservice\x1a\x0cgroups.proto\"\
    \xab\x01\n\x0fDecryptedMember\x12\x14\n\x04uuid\x18\x01\x20\x01(\x0cR\
    \x04uuidB\0\x120\n\x04role\x18\x02\x20\x01(\x0e2\x1a.signalservice.Membe\
    r.RoleR\x04roleB\0\x12\x20\n\nprofileKey\x18\x03\x20\x01(\x0cR\nprofileK\
    eyB\0\x12,\n\x10joinedAtRevision\x18\x05\x20\x01(\rR\x10joinedAtRevision\
    B\0:\0\"\xd0\x01\n\x16DecryptedPendingMember\x12\x14\n\x04uuid\x18\x01\
    \x20\x01(\x0cR\x04uuidB\0\x120\n\x04role\x18\x02\x20\x01(\x0e2\x1a.signa\
    lservice.Member.RoleR\x04roleB\0\x12\"\n\x0baddedByUuid\x18\x03\x20\x01(\
    \x0cR\x0baddedByUuidB\0\x12\x1e\n\ttimestamp\x18\x04\x20\x01(\x04R\ttime\
    stampB\0\x12(\n\x0euuidCipherText\x18\x05\x20\x01(\x0cR\x0euuidCipherTex\
    tB\0:\0\"u\n\x19DecryptedRequestingMember\x12\x14\n\x04uuid\x18\x01\x20\
    \x01(\x0cR\x04uuidB\0\x12\x20\n\nprofileKey\x18\x02\x20\x01(\x0cR\nprofi\
    leKeyB\0\x12\x1e\n\ttimestamp\x18\x04\x20\x01(\x04R\ttimestampB\0:\0\"a\
    \n\x1dDecryptedPendingMemberRemoval\x12\x14\n\x04uuid\x18\x01\x20\x01(\
    \x0cR\x04uuidB\0\x12(\n\x0euuidCipherText\x18\x02\x20\x01(\x0cR\x0euuidC\
    ipherTextB\0:\0\"b\n\x16DecryptedApproveMember\x12\x14\n\x04uuid\x18\x01\
    \x20\x01(\x0cR\x04uuidB\0\x120\n\x04role\x18\x02\x20\x01(\x0e2\x1a.signa\
    lservice.Member.RoleR\x04roleB\0:\0\"e\n\x19DecryptedModifyMemberRole\
    \x12\x14\n\x04uuid\x18\x01\x20\x01(\x0cR\x04uuidB\0\x120\n\x04role\x18\
    \x02\x20\x01(\x0e2\x1a.signalservice.Member.RoleR\x04roleB\0:\0\"\xc4\
    \x04\n\x0eDecryptedGroup\x12\x16\n\x05title\x18\x02\x20\x01(\tR\x05title\
    B\0\x12\x18\n\x06avatar\x18\x03\x20\x01(\tR\x06avatarB\0\x12]\n\x19disap\
    pearingMessagesTimer\x18\x04\x20\x01(\x0b2\x1d.signalservice.DecryptedTi\
    merR\x19disappearingMessagesTimerB\0\x12D\n\raccessControl\x18\x05\x20\
    \x01(\x0b2\x1c.signalservice.AccessControlR\raccessControlB\0\x12\x1c\n\
    \x08revision\x18\x06\x20\x01(\rR\x08revisionB\0\x12:\n\x07members\x18\
    \x07\x20\x03(\x0b2\x1e.signalservice.DecryptedMemberR\x07membersB\0\x12O\
    \n\x0ependingMembers\x18\x08\x20\x03(\x0b2%.signalservice.DecryptedPendi\
    ngMemberR\x0ependingMembersB\0\x12X\n\x11requestingMembers\x18\t\x20\x03\
    (\x0b2(.signalservice.DecryptedRequestingMemberR\x11requestingMembersB\0\
    \x120\n\x12inviteLinkPassword\x18\n\x20\x01(\x0cR\x12inviteLinkPasswordB\
    \0\x12\"\n\x0bdescription\x18\x0b\x20\x01(\tR\x0bdescriptionB\0:\0\"\xd2\
    \x0b\n\x14DecryptedGroupChange\x12\x18\n\x06editor\x18\x01\x20\x01(\x0cR\
    \x06editorB\0\x12\x1c\n\x08revision\x18\x02\x20\x01(\rR\x08revisionB\0\
    \x12@\n\nnewMembers\x18\x03\x20\x03(\x0b2\x1e.signalservice.DecryptedMem\
    berR\nnewMembersB\0\x12&\n\rdeleteMembers\x18\x04\x20\x03(\x0cR\rdeleteM\
    embersB\0\x12X\n\x11modifyMemberRoles\x18\x05\x20\x03(\x0b2(.signalservi\
    ce.DecryptedModifyMemberRoleR\x11modifyMemberRolesB\0\x12R\n\x13modified\
    ProfileKeys\x18\x06\x20\x03(\x0b2\x1e.signalservice.DecryptedMemberR\x13\
    modifiedProfileKeysB\0\x12U\n\x11newPendingMembers\x18\x07\x20\x03(\x0b2\
    %.signalservice.DecryptedPendingMemberR\x11newPendingMembersB\0\x12b\n\
    \x14deletePendingMembers\x18\x08\x20\x03(\x0b2,.signalservice.DecryptedP\
    endingMemberRemovalR\x14deletePendingMembersB\0\x12V\n\x15promotePending\
    Members\x18\t\x20\x03(\x0b2\x1e.signalservice.DecryptedMemberR\x15promot\
    ePendingMembersB\0\x12<\n\x08newTitle\x18\n\x20\x01(\x0b2\x1e.signalserv\
    ice.DecryptedStringR\x08newTitleB\0\x12>\n\tnewAvatar\x18\x0b\x20\x01(\
    \x0b2\x1e.signalservice.DecryptedStringR\tnewAvatarB\0\x12;\n\x08newTime\
    r\x18\x0c\x20\x01(\x0b2\x1d.signalservice.DecryptedTimerR\x08newTimerB\0\
    \x12]\n\x12newAttributeAccess\x18\r\x20\x01(\x0e2+.signalservice.AccessC\
    ontrol.AccessRequiredR\x12newAttributeAccessB\0\x12W\n\x0fnewMemberAcces\
    s\x18\x0e\x20\x01(\x0e2+.signalservice.AccessControl.AccessRequiredR\x0f\
    newMemberAccessB\0\x12_\n\x13newInviteLinkAccess\x18\x0f\x20\x01(\x0e2+.\
    signalservice.AccessControl.AccessRequiredR\x13newInviteLinkAccessB\0\
    \x12^\n\x14newRequestingMembers\x18\x10\x20\x03(\x0b2(.signalservice.Dec\
    ryptedRequestingMemberR\x14newRequestingMembersB\0\x12:\n\x17deleteReque\
    stingMembers\x18\x11\x20\x03(\x0cR\x17deleteRequestingMembersB\0\x12c\n\
    \x18promoteRequestingMembers\x18\x12\x20\x03(\x0b2%.signalservice.Decryp\
    tedApproveMemberR\x18promoteRequestingMembersB\0\x126\n\x15newInviteLink\
    Password\x18\x13\x20\x01(\x0cR\x15newInviteLinkPasswordB\0\x12H\n\x0enew\
    Description\x18\x14\x20\x01(\x0b2\x1e.signalservice.DecryptedStringR\x0e\
    newDescriptionB\0:\0\"+\n\x0fDecryptedString\x12\x16\n\x05value\x18\x01\
    \x20\x01(\tR\x05valueB\0:\0\"0\n\x0eDecryptedTimer\x12\x1c\n\x08duration\
    \x18\x01\x20\x01(\rR\x08durationB\0:\0\"\xc5\x02\n\x16DecryptedGroupJoin\
    Info\x12\x16\n\x05title\x18\x02\x20\x01(\tR\x05titleB\0\x12\x18\n\x06ava\
    tar\x18\x03\x20\x01(\tR\x06avatarB\0\x12\"\n\x0bmemberCount\x18\x04\x20\
    \x01(\rR\x0bmemberCountB\0\x12[\n\x11addFromInviteLink\x18\x05\x20\x01(\
    \x0e2+.signalservice.AccessControl.AccessRequiredR\x11addFromInviteLinkB\
    \0\x12\x1c\n\x08revision\x18\x06\x20\x01(\rR\x08revisionB\0\x124\n\x14pe\
    ndingAdminApproval\x18\x07\x20\x01(\x08R\x14pendingAdminApprovalB\0\x12\
    \"\n\x0bdescription\x18\x08\x20\x01(\tR\x0bdescriptionB\0:\0B\0b\x06prot\
    o3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
