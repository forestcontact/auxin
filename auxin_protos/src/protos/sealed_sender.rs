// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `sealed_sender.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ServerCertificate {
    // message fields
    certificate: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerCertificate {
    fn default() -> &'a ServerCertificate {
        <ServerCertificate as ::protobuf::Message>::default_instance()
    }
}

impl ServerCertificate {
    pub fn new() -> ServerCertificate {
        ::std::default::Default::default()
    }

    // optional bytes certificate = 1;


    pub fn get_certificate(&self) -> &[u8] {
        match self.certificate.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_certificate(&mut self) {
        self.certificate.clear();
    }

    pub fn has_certificate(&self) -> bool {
        self.certificate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_certificate(&mut self, v: ::std::vec::Vec<u8>) {
        self.certificate = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_certificate(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.certificate.is_none() {
            self.certificate.set_default();
        }
        self.certificate.as_mut().unwrap()
    }

    // Take field
    pub fn take_certificate(&mut self) -> ::std::vec::Vec<u8> {
        self.certificate.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ServerCertificate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.certificate)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.certificate.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.certificate.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerCertificate {
        ServerCertificate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "certificate",
                |m: &ServerCertificate| { &m.certificate },
                |m: &mut ServerCertificate| { &mut m.certificate },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &ServerCertificate| { &m.signature },
                |m: &mut ServerCertificate| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerCertificate>(
                "ServerCertificate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ServerCertificate {
        static instance: ::protobuf::rt::LazyV2<ServerCertificate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServerCertificate::new)
    }
}

impl ::protobuf::Clear for ServerCertificate {
    fn clear(&mut self) {
        self.certificate.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerCertificate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerCertificate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ServerCertificate_Certificate {
    // message fields
    id: ::std::option::Option<u32>,
    key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerCertificate_Certificate {
    fn default() -> &'a ServerCertificate_Certificate {
        <ServerCertificate_Certificate as ::protobuf::Message>::default_instance()
    }
}

impl ServerCertificate_Certificate {
    pub fn new() -> ServerCertificate_Certificate {
        ::std::default::Default::default()
    }

    // optional uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id.unwrap_or(0)
    }
    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }

    // optional bytes key = 2;


    pub fn get_key(&self) -> &[u8] {
        match self.key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        self.key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ServerCertificate_Certificate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.id {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.key.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerCertificate_Certificate {
        ServerCertificate_Certificate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &ServerCertificate_Certificate| { &m.id },
                |m: &mut ServerCertificate_Certificate| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "key",
                |m: &ServerCertificate_Certificate| { &m.key },
                |m: &mut ServerCertificate_Certificate| { &mut m.key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerCertificate_Certificate>(
                "ServerCertificate.Certificate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ServerCertificate_Certificate {
        static instance: ::protobuf::rt::LazyV2<ServerCertificate_Certificate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServerCertificate_Certificate::new)
    }
}

impl ::protobuf::Clear for ServerCertificate_Certificate {
    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerCertificate_Certificate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerCertificate_Certificate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SenderCertificate {
    // message fields
    certificate: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SenderCertificate {
    fn default() -> &'a SenderCertificate {
        <SenderCertificate as ::protobuf::Message>::default_instance()
    }
}

impl SenderCertificate {
    pub fn new() -> SenderCertificate {
        ::std::default::Default::default()
    }

    // optional bytes certificate = 1;


    pub fn get_certificate(&self) -> &[u8] {
        match self.certificate.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_certificate(&mut self) {
        self.certificate.clear();
    }

    pub fn has_certificate(&self) -> bool {
        self.certificate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_certificate(&mut self, v: ::std::vec::Vec<u8>) {
        self.certificate = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_certificate(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.certificate.is_none() {
            self.certificate.set_default();
        }
        self.certificate.as_mut().unwrap()
    }

    // Take field
    pub fn take_certificate(&mut self) -> ::std::vec::Vec<u8> {
        self.certificate.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SenderCertificate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.certificate)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.certificate.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.certificate.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SenderCertificate {
        SenderCertificate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "certificate",
                |m: &SenderCertificate| { &m.certificate },
                |m: &mut SenderCertificate| { &mut m.certificate },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &SenderCertificate| { &m.signature },
                |m: &mut SenderCertificate| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SenderCertificate>(
                "SenderCertificate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SenderCertificate {
        static instance: ::protobuf::rt::LazyV2<SenderCertificate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SenderCertificate::new)
    }
}

impl ::protobuf::Clear for SenderCertificate {
    fn clear(&mut self) {
        self.certificate.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SenderCertificate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SenderCertificate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SenderCertificate_Certificate {
    // message fields
    senderE164: ::protobuf::SingularField<::std::string::String>,
    senderUuid: ::protobuf::SingularField<::std::string::String>,
    senderDevice: ::std::option::Option<u32>,
    expires: ::std::option::Option<u64>,
    identityKey: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub signer: ::protobuf::SingularPtrField<ServerCertificate>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SenderCertificate_Certificate {
    fn default() -> &'a SenderCertificate_Certificate {
        <SenderCertificate_Certificate as ::protobuf::Message>::default_instance()
    }
}

impl SenderCertificate_Certificate {
    pub fn new() -> SenderCertificate_Certificate {
        ::std::default::Default::default()
    }

    // optional string senderE164 = 1;


    pub fn get_senderE164(&self) -> &str {
        match self.senderE164.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_senderE164(&mut self) {
        self.senderE164.clear();
    }

    pub fn has_senderE164(&self) -> bool {
        self.senderE164.is_some()
    }

    // Param is passed by value, moved
    pub fn set_senderE164(&mut self, v: ::std::string::String) {
        self.senderE164 = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_senderE164(&mut self) -> &mut ::std::string::String {
        if self.senderE164.is_none() {
            self.senderE164.set_default();
        }
        self.senderE164.as_mut().unwrap()
    }

    // Take field
    pub fn take_senderE164(&mut self) -> ::std::string::String {
        self.senderE164.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string senderUuid = 6;


    pub fn get_senderUuid(&self) -> &str {
        match self.senderUuid.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_senderUuid(&mut self) {
        self.senderUuid.clear();
    }

    pub fn has_senderUuid(&self) -> bool {
        self.senderUuid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_senderUuid(&mut self, v: ::std::string::String) {
        self.senderUuid = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_senderUuid(&mut self) -> &mut ::std::string::String {
        if self.senderUuid.is_none() {
            self.senderUuid.set_default();
        }
        self.senderUuid.as_mut().unwrap()
    }

    // Take field
    pub fn take_senderUuid(&mut self) -> ::std::string::String {
        self.senderUuid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 senderDevice = 2;


    pub fn get_senderDevice(&self) -> u32 {
        self.senderDevice.unwrap_or(0)
    }
    pub fn clear_senderDevice(&mut self) {
        self.senderDevice = ::std::option::Option::None;
    }

    pub fn has_senderDevice(&self) -> bool {
        self.senderDevice.is_some()
    }

    // Param is passed by value, moved
    pub fn set_senderDevice(&mut self, v: u32) {
        self.senderDevice = ::std::option::Option::Some(v);
    }

    // optional fixed64 expires = 3;


    pub fn get_expires(&self) -> u64 {
        self.expires.unwrap_or(0)
    }
    pub fn clear_expires(&mut self) {
        self.expires = ::std::option::Option::None;
    }

    pub fn has_expires(&self) -> bool {
        self.expires.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expires(&mut self, v: u64) {
        self.expires = ::std::option::Option::Some(v);
    }

    // optional bytes identityKey = 4;


    pub fn get_identityKey(&self) -> &[u8] {
        match self.identityKey.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_identityKey(&mut self) {
        self.identityKey.clear();
    }

    pub fn has_identityKey(&self) -> bool {
        self.identityKey.is_some()
    }

    // Param is passed by value, moved
    pub fn set_identityKey(&mut self, v: ::std::vec::Vec<u8>) {
        self.identityKey = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identityKey(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.identityKey.is_none() {
            self.identityKey.set_default();
        }
        self.identityKey.as_mut().unwrap()
    }

    // Take field
    pub fn take_identityKey(&mut self) -> ::std::vec::Vec<u8> {
        self.identityKey.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .signal.proto.sealed_sender.ServerCertificate signer = 5;


    pub fn get_signer(&self) -> &ServerCertificate {
        self.signer.as_ref().unwrap_or_else(|| <ServerCertificate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signer(&mut self) {
        self.signer.clear();
    }

    pub fn has_signer(&self) -> bool {
        self.signer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signer(&mut self, v: ServerCertificate) {
        self.signer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer(&mut self) -> &mut ServerCertificate {
        if self.signer.is_none() {
            self.signer.set_default();
        }
        self.signer.as_mut().unwrap()
    }

    // Take field
    pub fn take_signer(&mut self) -> ServerCertificate {
        self.signer.take().unwrap_or_else(|| ServerCertificate::new())
    }
}

impl ::protobuf::Message for SenderCertificate_Certificate {
    fn is_initialized(&self) -> bool {
        for v in &self.signer {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.senderE164)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.senderUuid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.senderDevice = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.expires = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.identityKey)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.senderE164.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.senderUuid.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.senderDevice {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.expires {
            my_size += 9;
        }
        if let Some(ref v) = self.identityKey.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(ref v) = self.signer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.senderE164.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.senderUuid.as_ref() {
            os.write_string(6, &v)?;
        }
        if let Some(v) = self.senderDevice {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.expires {
            os.write_fixed64(3, v)?;
        }
        if let Some(ref v) = self.identityKey.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(ref v) = self.signer.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SenderCertificate_Certificate {
        SenderCertificate_Certificate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "senderE164",
                |m: &SenderCertificate_Certificate| { &m.senderE164 },
                |m: &mut SenderCertificate_Certificate| { &mut m.senderE164 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "senderUuid",
                |m: &SenderCertificate_Certificate| { &m.senderUuid },
                |m: &mut SenderCertificate_Certificate| { &mut m.senderUuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "senderDevice",
                |m: &SenderCertificate_Certificate| { &m.senderDevice },
                |m: &mut SenderCertificate_Certificate| { &mut m.senderDevice },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "expires",
                |m: &SenderCertificate_Certificate| { &m.expires },
                |m: &mut SenderCertificate_Certificate| { &mut m.expires },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "identityKey",
                |m: &SenderCertificate_Certificate| { &m.identityKey },
                |m: &mut SenderCertificate_Certificate| { &mut m.identityKey },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ServerCertificate>>(
                "signer",
                |m: &SenderCertificate_Certificate| { &m.signer },
                |m: &mut SenderCertificate_Certificate| { &mut m.signer },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SenderCertificate_Certificate>(
                "SenderCertificate.Certificate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SenderCertificate_Certificate {
        static instance: ::protobuf::rt::LazyV2<SenderCertificate_Certificate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SenderCertificate_Certificate::new)
    }
}

impl ::protobuf::Clear for SenderCertificate_Certificate {
    fn clear(&mut self) {
        self.senderE164.clear();
        self.senderUuid.clear();
        self.senderDevice = ::std::option::Option::None;
        self.expires = ::std::option::Option::None;
        self.identityKey.clear();
        self.signer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SenderCertificate_Certificate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SenderCertificate_Certificate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct UnidentifiedSenderMessage {
    // message fields
    ephemeralPublic: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    encryptedStatic: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    encryptedMessage: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnidentifiedSenderMessage {
    fn default() -> &'a UnidentifiedSenderMessage {
        <UnidentifiedSenderMessage as ::protobuf::Message>::default_instance()
    }
}

impl UnidentifiedSenderMessage {
    pub fn new() -> UnidentifiedSenderMessage {
        ::std::default::Default::default()
    }

    // optional bytes ephemeralPublic = 1;


    pub fn get_ephemeralPublic(&self) -> &[u8] {
        match self.ephemeralPublic.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_ephemeralPublic(&mut self) {
        self.ephemeralPublic.clear();
    }

    pub fn has_ephemeralPublic(&self) -> bool {
        self.ephemeralPublic.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ephemeralPublic(&mut self, v: ::std::vec::Vec<u8>) {
        self.ephemeralPublic = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ephemeralPublic(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.ephemeralPublic.is_none() {
            self.ephemeralPublic.set_default();
        }
        self.ephemeralPublic.as_mut().unwrap()
    }

    // Take field
    pub fn take_ephemeralPublic(&mut self) -> ::std::vec::Vec<u8> {
        self.ephemeralPublic.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes encryptedStatic = 2;


    pub fn get_encryptedStatic(&self) -> &[u8] {
        match self.encryptedStatic.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_encryptedStatic(&mut self) {
        self.encryptedStatic.clear();
    }

    pub fn has_encryptedStatic(&self) -> bool {
        self.encryptedStatic.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encryptedStatic(&mut self, v: ::std::vec::Vec<u8>) {
        self.encryptedStatic = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encryptedStatic(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encryptedStatic.is_none() {
            self.encryptedStatic.set_default();
        }
        self.encryptedStatic.as_mut().unwrap()
    }

    // Take field
    pub fn take_encryptedStatic(&mut self) -> ::std::vec::Vec<u8> {
        self.encryptedStatic.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes encryptedMessage = 3;


    pub fn get_encryptedMessage(&self) -> &[u8] {
        match self.encryptedMessage.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_encryptedMessage(&mut self) {
        self.encryptedMessage.clear();
    }

    pub fn has_encryptedMessage(&self) -> bool {
        self.encryptedMessage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encryptedMessage(&mut self, v: ::std::vec::Vec<u8>) {
        self.encryptedMessage = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encryptedMessage(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encryptedMessage.is_none() {
            self.encryptedMessage.set_default();
        }
        self.encryptedMessage.as_mut().unwrap()
    }

    // Take field
    pub fn take_encryptedMessage(&mut self) -> ::std::vec::Vec<u8> {
        self.encryptedMessage.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for UnidentifiedSenderMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.ephemeralPublic)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.encryptedStatic)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.encryptedMessage)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ephemeralPublic.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.encryptedStatic.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.encryptedMessage.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ephemeralPublic.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.encryptedStatic.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.encryptedMessage.as_ref() {
            os.write_bytes(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnidentifiedSenderMessage {
        UnidentifiedSenderMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "ephemeralPublic",
                |m: &UnidentifiedSenderMessage| { &m.ephemeralPublic },
                |m: &mut UnidentifiedSenderMessage| { &mut m.ephemeralPublic },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "encryptedStatic",
                |m: &UnidentifiedSenderMessage| { &m.encryptedStatic },
                |m: &mut UnidentifiedSenderMessage| { &mut m.encryptedStatic },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "encryptedMessage",
                |m: &UnidentifiedSenderMessage| { &m.encryptedMessage },
                |m: &mut UnidentifiedSenderMessage| { &mut m.encryptedMessage },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UnidentifiedSenderMessage>(
                "UnidentifiedSenderMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UnidentifiedSenderMessage {
        static instance: ::protobuf::rt::LazyV2<UnidentifiedSenderMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UnidentifiedSenderMessage::new)
    }
}

impl ::protobuf::Clear for UnidentifiedSenderMessage {
    fn clear(&mut self) {
        self.ephemeralPublic.clear();
        self.encryptedStatic.clear();
        self.encryptedMessage.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnidentifiedSenderMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnidentifiedSenderMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct UnidentifiedSenderMessage_Message {
    // message fields
    field_type: ::std::option::Option<UnidentifiedSenderMessage_Message_Type>,
    pub senderCertificate: ::protobuf::SingularPtrField<SenderCertificate>,
    content: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    contentHint: ::std::option::Option<UnidentifiedSenderMessage_Message_ContentHint>,
    groupId: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnidentifiedSenderMessage_Message {
    fn default() -> &'a UnidentifiedSenderMessage_Message {
        <UnidentifiedSenderMessage_Message as ::protobuf::Message>::default_instance()
    }
}

impl UnidentifiedSenderMessage_Message {
    pub fn new() -> UnidentifiedSenderMessage_Message {
        ::std::default::Default::default()
    }

    // optional .signal.proto.sealed_sender.UnidentifiedSenderMessage.Message.Type type = 1;


    pub fn get_field_type(&self) -> UnidentifiedSenderMessage_Message_Type {
        self.field_type.unwrap_or(UnidentifiedSenderMessage_Message_Type::PREKEY_MESSAGE)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: UnidentifiedSenderMessage_Message_Type) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // optional .signal.proto.sealed_sender.SenderCertificate senderCertificate = 2;


    pub fn get_senderCertificate(&self) -> &SenderCertificate {
        self.senderCertificate.as_ref().unwrap_or_else(|| <SenderCertificate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_senderCertificate(&mut self) {
        self.senderCertificate.clear();
    }

    pub fn has_senderCertificate(&self) -> bool {
        self.senderCertificate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_senderCertificate(&mut self, v: SenderCertificate) {
        self.senderCertificate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_senderCertificate(&mut self) -> &mut SenderCertificate {
        if self.senderCertificate.is_none() {
            self.senderCertificate.set_default();
        }
        self.senderCertificate.as_mut().unwrap()
    }

    // Take field
    pub fn take_senderCertificate(&mut self) -> SenderCertificate {
        self.senderCertificate.take().unwrap_or_else(|| SenderCertificate::new())
    }

    // optional bytes content = 3;


    pub fn get_content(&self) -> &[u8] {
        match self.content.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    pub fn has_content(&self) -> bool {
        self.content.is_some()
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::vec::Vec<u8>) {
        self.content = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.content.is_none() {
            self.content.set_default();
        }
        self.content.as_mut().unwrap()
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::vec::Vec<u8> {
        self.content.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .signal.proto.sealed_sender.UnidentifiedSenderMessage.Message.ContentHint contentHint = 4;


    pub fn get_contentHint(&self) -> UnidentifiedSenderMessage_Message_ContentHint {
        self.contentHint.unwrap_or(UnidentifiedSenderMessage_Message_ContentHint::RESENDABLE)
    }
    pub fn clear_contentHint(&mut self) {
        self.contentHint = ::std::option::Option::None;
    }

    pub fn has_contentHint(&self) -> bool {
        self.contentHint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contentHint(&mut self, v: UnidentifiedSenderMessage_Message_ContentHint) {
        self.contentHint = ::std::option::Option::Some(v);
    }

    // optional bytes groupId = 5;


    pub fn get_groupId(&self) -> &[u8] {
        match self.groupId.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_groupId(&mut self) {
        self.groupId.clear();
    }

    pub fn has_groupId(&self) -> bool {
        self.groupId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_groupId(&mut self, v: ::std::vec::Vec<u8>) {
        self.groupId = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_groupId(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.groupId.is_none() {
            self.groupId.set_default();
        }
        self.groupId.as_mut().unwrap()
    }

    // Take field
    pub fn take_groupId(&mut self) -> ::std::vec::Vec<u8> {
        self.groupId.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for UnidentifiedSenderMessage_Message {
    fn is_initialized(&self) -> bool {
        for v in &self.senderCertificate {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.senderCertificate)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.content)?;
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.contentHint, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.groupId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.senderCertificate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.content.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(v) = self.contentHint {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        if let Some(ref v) = self.groupId.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.senderCertificate.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.content.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(v) = self.contentHint {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.groupId.as_ref() {
            os.write_bytes(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnidentifiedSenderMessage_Message {
        UnidentifiedSenderMessage_Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<UnidentifiedSenderMessage_Message_Type>>(
                "type",
                |m: &UnidentifiedSenderMessage_Message| { &m.field_type },
                |m: &mut UnidentifiedSenderMessage_Message| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SenderCertificate>>(
                "senderCertificate",
                |m: &UnidentifiedSenderMessage_Message| { &m.senderCertificate },
                |m: &mut UnidentifiedSenderMessage_Message| { &mut m.senderCertificate },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "content",
                |m: &UnidentifiedSenderMessage_Message| { &m.content },
                |m: &mut UnidentifiedSenderMessage_Message| { &mut m.content },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<UnidentifiedSenderMessage_Message_ContentHint>>(
                "contentHint",
                |m: &UnidentifiedSenderMessage_Message| { &m.contentHint },
                |m: &mut UnidentifiedSenderMessage_Message| { &mut m.contentHint },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "groupId",
                |m: &UnidentifiedSenderMessage_Message| { &m.groupId },
                |m: &mut UnidentifiedSenderMessage_Message| { &mut m.groupId },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UnidentifiedSenderMessage_Message>(
                "UnidentifiedSenderMessage.Message",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UnidentifiedSenderMessage_Message {
        static instance: ::protobuf::rt::LazyV2<UnidentifiedSenderMessage_Message> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UnidentifiedSenderMessage_Message::new)
    }
}

impl ::protobuf::Clear for UnidentifiedSenderMessage_Message {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.senderCertificate.clear();
        self.content.clear();
        self.contentHint = ::std::option::Option::None;
        self.groupId.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnidentifiedSenderMessage_Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnidentifiedSenderMessage_Message {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum UnidentifiedSenderMessage_Message_Type {
    PREKEY_MESSAGE = 1,
    MESSAGE = 2,
    SENDERKEY_MESSAGE = 7,
    PLAINTEXT_CONTENT = 8,
}

impl ::protobuf::ProtobufEnum for UnidentifiedSenderMessage_Message_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<UnidentifiedSenderMessage_Message_Type> {
        match value {
            1 => ::std::option::Option::Some(UnidentifiedSenderMessage_Message_Type::PREKEY_MESSAGE),
            2 => ::std::option::Option::Some(UnidentifiedSenderMessage_Message_Type::MESSAGE),
            7 => ::std::option::Option::Some(UnidentifiedSenderMessage_Message_Type::SENDERKEY_MESSAGE),
            8 => ::std::option::Option::Some(UnidentifiedSenderMessage_Message_Type::PLAINTEXT_CONTENT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [UnidentifiedSenderMessage_Message_Type] = &[
            UnidentifiedSenderMessage_Message_Type::PREKEY_MESSAGE,
            UnidentifiedSenderMessage_Message_Type::MESSAGE,
            UnidentifiedSenderMessage_Message_Type::SENDERKEY_MESSAGE,
            UnidentifiedSenderMessage_Message_Type::PLAINTEXT_CONTENT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<UnidentifiedSenderMessage_Message_Type>("UnidentifiedSenderMessage.Message.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for UnidentifiedSenderMessage_Message_Type {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for UnidentifiedSenderMessage_Message_Type {
    fn default() -> Self {
        UnidentifiedSenderMessage_Message_Type::PREKEY_MESSAGE
    }
}

impl ::protobuf::reflect::ProtobufValue for UnidentifiedSenderMessage_Message_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum UnidentifiedSenderMessage_Message_ContentHint {
    RESENDABLE = 1,
    IMPLICIT = 2,
}

impl ::protobuf::ProtobufEnum for UnidentifiedSenderMessage_Message_ContentHint {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<UnidentifiedSenderMessage_Message_ContentHint> {
        match value {
            1 => ::std::option::Option::Some(UnidentifiedSenderMessage_Message_ContentHint::RESENDABLE),
            2 => ::std::option::Option::Some(UnidentifiedSenderMessage_Message_ContentHint::IMPLICIT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [UnidentifiedSenderMessage_Message_ContentHint] = &[
            UnidentifiedSenderMessage_Message_ContentHint::RESENDABLE,
            UnidentifiedSenderMessage_Message_ContentHint::IMPLICIT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<UnidentifiedSenderMessage_Message_ContentHint>("UnidentifiedSenderMessage.Message.ContentHint", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for UnidentifiedSenderMessage_Message_ContentHint {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for UnidentifiedSenderMessage_Message_ContentHint {
    fn default() -> Self {
        UnidentifiedSenderMessage_Message_ContentHint::RESENDABLE
    }
}

impl ::protobuf::reflect::ProtobufValue for UnidentifiedSenderMessage_Message_ContentHint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13sealed_sender.proto\x12\x1asignal.proto.sealed_sender\"\x90\x01\n\
    \x11ServerCertificate\x12\"\n\x0bcertificate\x18\x01\x20\x01(\x0cR\x0bce\
    rtificateB\0\x12\x1e\n\tsignature\x18\x02\x20\x01(\x0cR\tsignatureB\0\
    \x1a5\n\x0bCertificate\x12\x10\n\x02id\x18\x01\x20\x01(\rR\x02idB\0\x12\
    \x12\n\x03key\x18\x02\x20\x01(\x0cR\x03keyB\0:\0:\0\"\xde\x02\n\x11Sende\
    rCertificate\x12\"\n\x0bcertificate\x18\x01\x20\x01(\x0cR\x0bcertificate\
    B\0\x12\x1e\n\tsignature\x18\x02\x20\x01(\x0cR\tsignatureB\0\x1a\x82\x02\
    \n\x0bCertificate\x12\x20\n\nsenderE164\x18\x01\x20\x01(\tR\nsenderE164B\
    \0\x12\x20\n\nsenderUuid\x18\x06\x20\x01(\tR\nsenderUuidB\0\x12$\n\x0cse\
    nderDevice\x18\x02\x20\x01(\rR\x0csenderDeviceB\0\x12\x1a\n\x07expires\
    \x18\x03\x20\x01(\x06R\x07expiresB\0\x12\"\n\x0bidentityKey\x18\x04\x20\
    \x01(\x0cR\x0bidentityKeyB\0\x12G\n\x06signer\x18\x05\x20\x01(\x0b2-.sig\
    nal.proto.sealed_sender.ServerCertificateR\x06signerB\0:\0:\0\"\x99\x05\
    \n\x19UnidentifiedSenderMessage\x12*\n\x0fephemeralPublic\x18\x01\x20\
    \x01(\x0cR\x0fephemeralPublicB\0\x12*\n\x0fencryptedStatic\x18\x02\x20\
    \x01(\x0cR\x0fencryptedStaticB\0\x12,\n\x10encryptedMessage\x18\x03\x20\
    \x01(\x0cR\x10encryptedMessageB\0\x1a\xf3\x03\n\x07Message\x12X\n\x04typ\
    e\x18\x01\x20\x01(\x0e2B.signal.proto.sealed_sender.UnidentifiedSenderMe\
    ssage.Message.TypeR\x04typeB\0\x12]\n\x11senderCertificate\x18\x02\x20\
    \x01(\x0b2-.signal.proto.sealed_sender.SenderCertificateR\x11senderCerti\
    ficateB\0\x12\x1a\n\x07content\x18\x03\x20\x01(\x0cR\x07contentB\0\x12m\
    \n\x0bcontentHint\x18\x04\x20\x01(\x0e2I.signal.proto.sealed_sender.Unid\
    entifiedSenderMessage.Message.ContentHintR\x0bcontentHintB\0\x12\x1a\n\
    \x07groupId\x18\x05\x20\x01(\x0cR\x07groupIdB\0\"W\n\x04Type\x12\x12\n\
    \x0ePREKEY_MESSAGE\x10\x01\x12\x0b\n\x07MESSAGE\x10\x02\x12\x15\n\x11SEN\
    DERKEY_MESSAGE\x10\x07\x12\x15\n\x11PLAINTEXT_CONTENT\x10\x08\x1a\0\"-\n\
    \x0bContentHint\x12\x0e\n\nRESENDABLE\x10\x01\x12\x0c\n\x08IMPLICIT\x10\
    \x02\x1a\0:\0:\0B\0b\x06proto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
